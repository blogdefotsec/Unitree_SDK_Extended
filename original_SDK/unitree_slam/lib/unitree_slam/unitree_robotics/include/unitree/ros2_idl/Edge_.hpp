/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: Edge_.idl
  Source: Edge_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_EDGE__HPP
#define DDSCXX_EDGE__HPP

#include "Float32MultiArray_.hpp"

#include <cstdint>
#include <vector>

namespace graph_msg
{
namespace msg
{
namespace dds_
{
class Edge_
{
private:
 std::vector<uint16_t> edge_name__;
 std::vector<uint16_t> start_node_name__;
 std::vector<uint16_t> end_node_name__;
 std::vector<float> edge_length__;
 std::vector<uint16_t> dog_stats__;
 std::vector<uint16_t> dog_back_stats__;
 std::vector<float> dog_speed__;
 std::vector<uint16_t> edge_state__;
 std::vector<float> edge_state_1__;
 std::vector<uint16_t> edge_state_2__;
 std::vector<uint16_t> edge_state_3__;
 std::vector<uint16_t> edge_state_4__;
 std::vector<::graph_msg::msg::dds_::Float32MultiArray_> edge_state_list__;

public:
  Edge_() = default;

  explicit Edge_(
    const std::vector<uint16_t>& edge_name_,
    const std::vector<uint16_t>& start_node_name_,
    const std::vector<uint16_t>& end_node_name_,
    const std::vector<float>& edge_length_,
    const std::vector<uint16_t>& dog_stats_,
    const std::vector<uint16_t>& dog_back_stats_,
    const std::vector<float>& dog_speed_,
    const std::vector<uint16_t>& edge_state_,
    const std::vector<float>& edge_state_1_,
    const std::vector<uint16_t>& edge_state_2_,
    const std::vector<uint16_t>& edge_state_3_,
    const std::vector<uint16_t>& edge_state_4_,
    const std::vector<::graph_msg::msg::dds_::Float32MultiArray_>& edge_state_list_) :
    edge_name__(edge_name_),
    start_node_name__(start_node_name_),
    end_node_name__(end_node_name_),
    edge_length__(edge_length_),
    dog_stats__(dog_stats_),
    dog_back_stats__(dog_back_stats_),
    dog_speed__(dog_speed_),
    edge_state__(edge_state_),
    edge_state_1__(edge_state_1_),
    edge_state_2__(edge_state_2_),
    edge_state_3__(edge_state_3_),
    edge_state_4__(edge_state_4_),
    edge_state_list__(edge_state_list_) { }

  const std::vector<uint16_t>& edge_name_() const { return this->edge_name__; }
  std::vector<uint16_t>& edge_name_() { return this->edge_name__; }
  void edge_name_(const std::vector<uint16_t>& _val_) { this->edge_name__ = _val_; }
  void edge_name_(std::vector<uint16_t>&& _val_) { this->edge_name__ = _val_; }
  const std::vector<uint16_t>& start_node_name_() const { return this->start_node_name__; }
  std::vector<uint16_t>& start_node_name_() { return this->start_node_name__; }
  void start_node_name_(const std::vector<uint16_t>& _val_) { this->start_node_name__ = _val_; }
  void start_node_name_(std::vector<uint16_t>&& _val_) { this->start_node_name__ = _val_; }
  const std::vector<uint16_t>& end_node_name_() const { return this->end_node_name__; }
  std::vector<uint16_t>& end_node_name_() { return this->end_node_name__; }
  void end_node_name_(const std::vector<uint16_t>& _val_) { this->end_node_name__ = _val_; }
  void end_node_name_(std::vector<uint16_t>&& _val_) { this->end_node_name__ = _val_; }
  const std::vector<float>& edge_length_() const { return this->edge_length__; }
  std::vector<float>& edge_length_() { return this->edge_length__; }
  void edge_length_(const std::vector<float>& _val_) { this->edge_length__ = _val_; }
  void edge_length_(std::vector<float>&& _val_) { this->edge_length__ = _val_; }
  const std::vector<uint16_t>& dog_stats_() const { return this->dog_stats__; }
  std::vector<uint16_t>& dog_stats_() { return this->dog_stats__; }
  void dog_stats_(const std::vector<uint16_t>& _val_) { this->dog_stats__ = _val_; }
  void dog_stats_(std::vector<uint16_t>&& _val_) { this->dog_stats__ = _val_; }
  const std::vector<uint16_t>& dog_back_stats_() const { return this->dog_back_stats__; }
  std::vector<uint16_t>& dog_back_stats_() { return this->dog_back_stats__; }
  void dog_back_stats_(const std::vector<uint16_t>& _val_) { this->dog_back_stats__ = _val_; }
  void dog_back_stats_(std::vector<uint16_t>&& _val_) { this->dog_back_stats__ = _val_; }
  const std::vector<float>& dog_speed_() const { return this->dog_speed__; }
  std::vector<float>& dog_speed_() { return this->dog_speed__; }
  void dog_speed_(const std::vector<float>& _val_) { this->dog_speed__ = _val_; }
  void dog_speed_(std::vector<float>&& _val_) { this->dog_speed__ = _val_; }
  const std::vector<uint16_t>& edge_state_() const { return this->edge_state__; }
  std::vector<uint16_t>& edge_state_() { return this->edge_state__; }
  void edge_state_(const std::vector<uint16_t>& _val_) { this->edge_state__ = _val_; }
  void edge_state_(std::vector<uint16_t>&& _val_) { this->edge_state__ = _val_; }
  const std::vector<float>& edge_state_1_() const { return this->edge_state_1__; }
  std::vector<float>& edge_state_1_() { return this->edge_state_1__; }
  void edge_state_1_(const std::vector<float>& _val_) { this->edge_state_1__ = _val_; }
  void edge_state_1_(std::vector<float>&& _val_) { this->edge_state_1__ = _val_; }
  const std::vector<uint16_t>& edge_state_2_() const { return this->edge_state_2__; }
  std::vector<uint16_t>& edge_state_2_() { return this->edge_state_2__; }
  void edge_state_2_(const std::vector<uint16_t>& _val_) { this->edge_state_2__ = _val_; }
  void edge_state_2_(std::vector<uint16_t>&& _val_) { this->edge_state_2__ = _val_; }
  const std::vector<uint16_t>& edge_state_3_() const { return this->edge_state_3__; }
  std::vector<uint16_t>& edge_state_3_() { return this->edge_state_3__; }
  void edge_state_3_(const std::vector<uint16_t>& _val_) { this->edge_state_3__ = _val_; }
  void edge_state_3_(std::vector<uint16_t>&& _val_) { this->edge_state_3__ = _val_; }
  const std::vector<uint16_t>& edge_state_4_() const { return this->edge_state_4__; }
  std::vector<uint16_t>& edge_state_4_() { return this->edge_state_4__; }
  void edge_state_4_(const std::vector<uint16_t>& _val_) { this->edge_state_4__ = _val_; }
  void edge_state_4_(std::vector<uint16_t>&& _val_) { this->edge_state_4__ = _val_; }
  const std::vector<::graph_msg::msg::dds_::Float32MultiArray_>& edge_state_list_() const { return this->edge_state_list__; }
  std::vector<::graph_msg::msg::dds_::Float32MultiArray_>& edge_state_list_() { return this->edge_state_list__; }
  void edge_state_list_(const std::vector<::graph_msg::msg::dds_::Float32MultiArray_>& _val_) { this->edge_state_list__ = _val_; }
  void edge_state_list_(std::vector<::graph_msg::msg::dds_::Float32MultiArray_>&& _val_) { this->edge_state_list__ = _val_; }

  bool operator==(const Edge_& _other) const
  {
    (void) _other;
    return edge_name__ == _other.edge_name__ &&
      start_node_name__ == _other.start_node_name__ &&
      end_node_name__ == _other.end_node_name__ &&
      edge_length__ == _other.edge_length__ &&
      dog_stats__ == _other.dog_stats__ &&
      dog_back_stats__ == _other.dog_back_stats__ &&
      dog_speed__ == _other.dog_speed__ &&
      edge_state__ == _other.edge_state__ &&
      edge_state_1__ == _other.edge_state_1__ &&
      edge_state_2__ == _other.edge_state_2__ &&
      edge_state_3__ == _other.edge_state_3__ &&
      edge_state_4__ == _other.edge_state_4__ &&
      edge_state_list__ == _other.edge_state_list__;
  }

  bool operator!=(const Edge_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::graph_msg::msg::dds_::Edge_>::getTypeName()
{
  return "graph_msg::msg::dds_::Edge_";
}

template <> constexpr bool TopicTraits<::graph_msg::msg::dds_::Edge_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::graph_msg::msg::dds_::Edge_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::graph_msg::msg::dds_::Edge_>::type_map_blob_sz() { return 1792; }
template<> constexpr unsigned int TopicTraits<::graph_msg::msg::dds_::Edge_>::type_info_blob_sz() { return 244; }
template<> inline const uint8_t * TopicTraits<::graph_msg::msg::dds_::Edge_>::type_map_blob() {
  static const uint8_t blob[] = {
 0x4f,  0x02,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf1,  0x2c,  0x1c,  0xa0,  0xf0,  0xe4,  0xda,  0x51, 
 0x24,  0xc4,  0x5b,  0x23,  0x7e,  0x0e,  0x48,  0x00,  0x26,  0x01,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x01,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06, 
 0x07,  0x16,  0x12,  0xf2,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0x80,  0x93,  0xee,  0x44,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0xbc,  0x88,  0xd3,  0x5e,  0x10,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x51,  0x71,  0x90,  0x8a, 
 0x10,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06, 
 0xaa,  0x01,  0xf2,  0x6d,  0x10,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0x0b,  0x4b,  0x33,  0x67,  0x10,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x80,  0xe0,  0x9e,  0x87,  0x10,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x9d,  0xc2,  0x42,  0x93, 
 0x10,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09, 
 0x63,  0xde,  0x86,  0x2c,  0x10,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0xc9,  0xca,  0x4b,  0x83,  0x10,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x07,  0x05,  0xdd,  0xb9,  0x10,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0xe6,  0xd8,  0xbf,  0xe5, 
 0x1e,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x00,  0xf1, 
 0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9,  0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05,  0x23,  0xc0,  0xce, 
 0xc7,  0xb9,  0xf1,  0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9,  0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05, 
 0x23,  0x00,  0x00,  0x00,  0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x38,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81, 
 0x15,  0xe3,  0xd7,  0x10,  0x44,  0xd1,  0xa2,  0x03,  0x96,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x1f,  0xc8,  0xc0,  0x53, 
 0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3,  0xd7,  0x10,  0x44,  0x00, 
 0x47,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x37,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x00,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68,  0x1a, 
 0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x7a,  0xe0,  0xb4,  0x74,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x14,  0x4c,  0xaa,  0x23,  0xf1,  0x24,  0x7a,  0x23,  0x10, 
 0x66,  0x66,  0x68,  0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x8e,  0x72,  0x17,  0x22,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x4e, 
 0xec,  0xfb,  0x50,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x3a, 
 0x74,  0xf1,  0x5f,  0x00,  0x26,  0x04,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf2,  0x63,  0xbb,  0xf5, 
 0x40,  0x0d,  0x15,  0x0d,  0x75,  0x58,  0x08,  0xe9,  0x2c,  0xdf,  0xab,  0x00,  0x27,  0x02,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a, 
 0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x45,  0x64,  0x67,  0x65,  0x5f,  0x00,  0xf7,  0x01,  0x00,  0x00, 
 0x0d,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0x0b,  0x00,  0x00,  0x00,  0x65,  0x64,  0x67,  0x65,  0x5f,  0x6e,  0x61,  0x6d, 
 0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x11,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x72, 
 0x74,  0x5f,  0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x6e,  0x61,  0x6d,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00, 
 0x21,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06, 
 0x0f,  0x00,  0x00,  0x00,  0x65,  0x6e,  0x64,  0x5f,  0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x6e,  0x61,  0x6d, 
 0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x0d,  0x00,  0x00,  0x00,  0x65,  0x64,  0x67,  0x65, 
 0x5f,  0x6c,  0x65,  0x6e,  0x67,  0x74,  0x68,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x0b,  0x00,  0x00,  0x00, 
 0x64,  0x6f,  0x67,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x73,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06, 
 0x10,  0x00,  0x00,  0x00,  0x64,  0x6f,  0x67,  0x5f,  0x62,  0x61,  0x63,  0x6b,  0x5f,  0x73,  0x74,  0x61, 
 0x74,  0x73,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x0b,  0x00,  0x00,  0x00,  0x64,  0x6f,  0x67,  0x5f, 
 0x73,  0x70,  0x65,  0x65,  0x64,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x0c,  0x00,  0x00,  0x00, 
 0x65,  0x64,  0x67,  0x65,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09, 
 0x0e,  0x00,  0x00,  0x00,  0x65,  0x64,  0x67,  0x65,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x31, 
 0x5f,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0x0e,  0x00,  0x00,  0x00,  0x65,  0x64,  0x67,  0x65,  0x5f,  0x73,  0x74,  0x61, 
 0x74,  0x65,  0x5f,  0x32,  0x5f,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x0e,  0x00,  0x00,  0x00,  0x65,  0x64,  0x67,  0x65, 
 0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x33,  0x5f,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x0e,  0x00,  0x00,  0x00, 
 0x65,  0x64,  0x67,  0x65,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x34,  0x5f,  0x00,  0x00,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2,  0x01,  0x00,  0x00,  0xf2, 
 0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50,  0x10,  0x5f,  0x2a,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x65,  0x64,  0x67,  0x65,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x6c, 
 0x69,  0x73,  0x74,  0x5f,  0x00,  0x00,  0x00,  0xf2,  0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6, 
 0x91,  0xa8,  0x50,  0x10,  0x5f,  0x2a,  0x00,  0x00,  0x8c,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x31,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x29,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70, 
 0x68,  0x5f,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f, 
 0x3a,  0x3a,  0x46,  0x6c,  0x6f,  0x61,  0x74,  0x33,  0x32,  0x4d,  0x75,  0x6c,  0x74,  0x69,  0x41,  0x72, 
 0x72,  0x61,  0x79,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x26,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0, 
 0x01,  0x0a,  0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a,  0x21,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x6c,  0x61,  0x79,  0x6f,  0x75,  0x74,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x06,  0x00,  0x00,  0x00, 
 0x64,  0x61,  0x74,  0x61,  0x5f,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a, 
 0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a,  0x21,  0x00,  0x8b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x30,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x28,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70, 
 0x68,  0x5f,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f, 
 0x3a,  0x3a,  0x4d,  0x75,  0x6c,  0x74,  0x69,  0x41,  0x72,  0x72,  0x61,  0x79,  0x4c,  0x61,  0x79,  0x6f, 
 0x75,  0x74,  0x5f,  0x00,  0x4f,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2,  0x01,  0x00,  0x00,  0xf2,  0xc6,  0x70,  0x38,  0xfd, 
 0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x64,  0x69,  0x6d,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x5f,  0x6f,  0x66,  0x66, 
 0x73,  0x65,  0x74,  0x5f,  0x00,  0x00,  0x00,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba, 
 0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0x00,  0x00,  0x92,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2b,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70, 
 0x68,  0x5f,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f, 
 0x3a,  0x3a,  0x4d,  0x75,  0x6c,  0x74,  0x69,  0x41,  0x72,  0x72,  0x61,  0x79,  0x44,  0x69,  0x6d,  0x65, 
 0x6e,  0x73,  0x69,  0x6f,  0x6e,  0x5f,  0x00,  0x00,  0x52,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x6c,  0x61,  0x62,  0x65,  0x6c,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00,  0x73,  0x69,  0x7a,  0x65, 
 0x5f,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x73,  0x74,  0x72,  0x69,  0x64,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x7c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf2,  0x63,  0xbb,  0xf5,  0x40,  0x0d,  0x15,  0x0d, 
 0x75,  0x58,  0x08,  0xe9,  0x2c,  0xdf,  0xab,  0xf1,  0x2c,  0x1c,  0xa0,  0xf0,  0xe4,  0xda,  0x51,  0x24, 
 0xc4,  0x5b,  0x23,  0x7e,  0x0e,  0x48,  0xf2,  0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91, 
 0xa8,  0x50,  0x10,  0x5f,  0x2a,  0xf1,  0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9,  0x47,  0xe9,  0x3a, 
 0x65,  0x7f,  0x05,  0x23,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a,  0xaa,  0xe1,  0x3e,  0xde, 
 0x13,  0x4a,  0x21,  0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3,  0xd7, 
 0x10,  0x44,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80, 
 0x0e,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68,  0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45, 
};
  return blob;
}
template<> inline const uint8_t * TopicTraits<::graph_msg::msg::dds_::Edge_>::type_info_blob() {
  static const uint8_t blob[] = {
 0xf0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x2c,  0x1c,  0xa0,  0xf0,  0xe4,  0xda,  0x51,  0x24,  0xc4,  0x5b,  0x23, 
 0x7e,  0x0e,  0x48,  0x00,  0x2a,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9, 
 0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05,  0x23,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3,  0xd7,  0x10,  0x44,  0x00, 
 0x4b,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68, 
 0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x00,  0x47,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x63,  0xbb,  0xf5, 
 0x40,  0x0d,  0x15,  0x0d,  0x75,  0x58,  0x08,  0xe9,  0x2c,  0xdf,  0xab,  0x00,  0x2b,  0x02,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50,  0x10,  0x5f,  0x2a,  0x00, 
 0x90,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a, 
 0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a,  0x21,  0x00,  0x8f,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0x00, 
 0x96,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::graph_msg::msg::dds_::Edge_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::graph_msg::msg::dds_::Edge_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::graph_msg::msg::dds_::Edge_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::graph_msg::msg::dds_::Edge_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::graph_msg::msg::dds_::Edge_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_name_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.edge_name_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.start_node_name_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.start_node_name_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.end_node_name_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.end_node_name_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_length_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.edge_length_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_stats_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.dog_stats_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_back_stats_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.dog_back_stats_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_speed_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.dog_speed_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.edge_state_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_1_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.edge_state_1_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_2_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.edge_state_2_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_3_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.edge_state_3_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_4_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.edge_state_4_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_list_().size());
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!write(streamer, instance.edge_state_list_()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::graph_msg::msg::dds_::Edge_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::Edge_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::graph_msg::msg::dds_::Edge_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_name_().size());
      if (!read(streamer, se_1))
        return false;
      instance.edge_name_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.edge_name_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.start_node_name_().size());
      if (!read(streamer, se_1))
        return false;
      instance.start_node_name_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.start_node_name_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.end_node_name_().size());
      if (!read(streamer, se_1))
        return false;
      instance.end_node_name_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.end_node_name_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_length_().size());
      if (!read(streamer, se_1))
        return false;
      instance.edge_length_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.edge_length_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_stats_().size());
      if (!read(streamer, se_1))
        return false;
      instance.dog_stats_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.dog_stats_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_back_stats_().size());
      if (!read(streamer, se_1))
        return false;
      instance.dog_back_stats_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.dog_back_stats_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_speed_().size());
      if (!read(streamer, se_1))
        return false;
      instance.dog_speed_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.dog_speed_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_().size());
      if (!read(streamer, se_1))
        return false;
      instance.edge_state_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.edge_state_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_1_().size());
      if (!read(streamer, se_1))
        return false;
      instance.edge_state_1_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.edge_state_1_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_2_().size());
      if (!read(streamer, se_1))
        return false;
      instance.edge_state_2_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.edge_state_2_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_3_().size());
      if (!read(streamer, se_1))
        return false;
      instance.edge_state_3_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.edge_state_3_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_4_().size());
      if (!read(streamer, se_1))
        return false;
      instance.edge_state_4_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.edge_state_4_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_list_().size());
      if (!read(streamer, se_1))
        return false;
      instance.edge_state_list_().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!read(streamer, instance.edge_state_list_()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::graph_msg::msg::dds_::Edge_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::Edge_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::graph_msg::msg::dds_::Edge_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_name_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.start_node_name_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.end_node_name_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_length_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_stats_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_back_stats_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.dog_speed_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_1_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_2_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_3_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_4_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.edge_state_list_().size());
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!move(streamer, instance.edge_state_list_()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::graph_msg::msg::dds_::Edge_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::Edge_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::graph_msg::msg::dds_::Edge_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!max(streamer, instance.edge_state_list_()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::graph_msg::msg::dds_::Edge_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::Edge_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_EDGE__HPP
