/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: PcToImage_.idl
  Source: PcToImage_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_PCTOIMAGE__HPP
#define DDSCXX_PCTOIMAGE__HPP

#include "Image_.hpp"


namespace unitree_interfaces
{
namespace msg
{
namespace dds_
{
class PcToImage_
{
private:
 float x__ = 0.0f;
 float y__ = 0.0f;
 float res__ = 0.0f;
 ::sensor_msgs::msg::dds_::Image_ image__;

public:
  PcToImage_() = default;

  explicit PcToImage_(
    float x_,
    float y_,
    float res_,
    const ::sensor_msgs::msg::dds_::Image_& image_) :
    x__(x_),
    y__(y_),
    res__(res_),
    image__(image_) { }

  float x_() const { return this->x__; }
  float& x_() { return this->x__; }
  void x_(float _val_) { this->x__ = _val_; }
  float y_() const { return this->y__; }
  float& y_() { return this->y__; }
  void y_(float _val_) { this->y__ = _val_; }
  float res_() const { return this->res__; }
  float& res_() { return this->res__; }
  void res_(float _val_) { this->res__ = _val_; }
  const ::sensor_msgs::msg::dds_::Image_& image_() const { return this->image__; }
  ::sensor_msgs::msg::dds_::Image_& image_() { return this->image__; }
  void image_(const ::sensor_msgs::msg::dds_::Image_& _val_) { this->image__ = _val_; }
  void image_(::sensor_msgs::msg::dds_::Image_&& _val_) { this->image__ = _val_; }

  bool operator==(const PcToImage_& _other) const
  {
    (void) _other;
    return x__ == _other.x__ &&
      y__ == _other.y__ &&
      res__ == _other.res__ &&
      image__ == _other.image__;
  }

  bool operator!=(const PcToImage_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_interfaces::msg::dds_::PcToImage_>::getTypeName()
{
  return "unitree_interfaces::msg::dds_::PcToImage_";
}

template <> constexpr bool TopicTraits<::unitree_interfaces::msg::dds_::PcToImage_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::unitree_interfaces::msg::dds_::PcToImage_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::unitree_interfaces::msg::dds_::PcToImage_>::type_map_blob_sz() { return 1360; }
template<> constexpr unsigned int TopicTraits<::unitree_interfaces::msg::dds_::PcToImage_>::type_info_blob_sz() { return 244; }
template<> inline const uint8_t * TopicTraits<::unitree_interfaces::msg::dds_::PcToImage_>::type_map_blob() {
  static const uint8_t blob[] = {
 0xc3,  0x01,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf1,  0x13,  0x36,  0x21,  0xa7,  0x40,  0xc5,  0x67, 
 0x60,  0xdb,  0x31,  0xd2,  0xb3,  0xa0,  0x1c,  0x00,  0x61,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x51,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x22,  0x1c,  0x57,  0x2a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xff,  0x10,  0x8b,  0x96,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x45,  0x68,  0xe3,  0x21,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xbd,  0xe7,  0xe1,  0x60,  0xec, 
 0x3a,  0x53,  0x6a,  0x94,  0x0c,  0x92,  0x0f,  0x97,  0x0b,  0x15,  0xa7,  0xa5,  0xdc,  0xf1,  0xbd,  0xe7, 
 0xe1,  0x60,  0xec,  0x3a,  0x53,  0x6a,  0x94,  0x0c,  0x92,  0x0f,  0x97,  0x0b,  0x98,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x88,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xdc, 
 0xf1,  0x2c,  0xd2,  0xdd,  0x5e,  0x71,  0x2c,  0xb7,  0xb1,  0xe5,  0x1f,  0xa3,  0xf2,  0xd8,  0xe7,  0xf6, 
 0x3d,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x6c, 
 0x1d,  0x8c,  0xd8,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xbb, 
 0x01,  0xe5,  0x23,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0xd3,  0xdd,  0x67,  0xed,  0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x41, 
 0x52,  0x49,  0x0b,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x9d, 
 0x10,  0x78,  0x22,  0x00,  0x10,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x02,  0x1f,  0xc8,  0xc0,  0x53,  0xf1,  0xdc,  0xf1,  0x2c,  0xd2,  0xdd,  0x5e,  0x71, 
 0x2c,  0xb7,  0xb1,  0xe5,  0x1f,  0xa3,  0xf2,  0x00,  0x44,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54, 
 0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x96,  0xb8,  0xc7,  0x8d,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x4b,  0xb3,  0x9c,  0x5c, 
 0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0x00,  0x02,  0x03,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0xf2,  0x4b,  0x79,  0x24,  0x06,  0xa4,  0xb5,  0xef,  0x45,  0xc2,  0xe7,  0x42,  0xaf,  0x92,  0xb1,  0x00, 
 0xb5,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x32,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x75,  0x6e,  0x69,  0x74,  0x72,  0x65,  0x65,  0x5f,  0x69,  0x6e,  0x74,  0x65, 
 0x72,  0x66,  0x61,  0x63,  0x65,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73, 
 0x5f,  0x3a,  0x3a,  0x50,  0x63,  0x54,  0x6f,  0x49,  0x6d,  0x61,  0x67,  0x65,  0x5f,  0x00,  0x00,  0x00, 
 0x75,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x03,  0x00,  0x00,  0x00,  0x78,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x79,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x05,  0x00,  0x00,  0x00,  0x72,  0x65,  0x73,  0x5f,  0x00,  0x00,  0x00,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0x33,  0xf7,  0x7f,  0x1e,  0x1a, 
 0x8e,  0x97,  0x8a,  0x6f,  0xda,  0xe6,  0xdf,  0xa9,  0xb6,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x69,  0x6d,  0x61,  0x67,  0x65,  0x5f,  0x00,  0x00,  0x00,  0xf2,  0x33,  0xf7,  0x7f,  0x1e,  0x1a,  0x8e, 
 0x97,  0x8a,  0x6f,  0xda,  0xe6,  0xdf,  0xa9,  0xb6,  0x0c,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x73,  0x65,  0x6e,  0x73, 
 0x6f,  0x72,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64, 
 0x73,  0x5f,  0x3a,  0x3a,  0x49,  0x6d,  0x61,  0x67,  0x65,  0x5f,  0x00,  0x00,  0xd8,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xe5, 
 0x76,  0x5e,  0xc4,  0x8c,  0xff,  0xd4,  0x19,  0xed,  0x7f,  0xe8,  0x4e,  0x2a,  0x55,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x68,  0x65,  0x61,  0x64,  0x65,  0x72,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x68,  0x65,  0x69,  0x67,  0x68,  0x74,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x07,  0x00,  0x00,  0x00,  0x77,  0x69,  0x64,  0x74, 
 0x68,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x70,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x65,  0x6e,  0x63,  0x6f,  0x64,  0x69,  0x6e,  0x67, 
 0x5f,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00, 
 0x0e,  0x00,  0x00,  0x00,  0x69,  0x73,  0x5f,  0x62,  0x69,  0x67,  0x65,  0x6e,  0x64,  0x69,  0x61,  0x6e, 
 0x5f,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x65,  0x70,  0x5f,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x02,  0x06,  0x00,  0x00,  0x00, 
 0x64,  0x61,  0x74,  0x61,  0x5f,  0x00,  0x00,  0x00,  0xf2,  0xe5,  0x76,  0x5e,  0xc4,  0x8c,  0xff,  0xd4, 
 0x19,  0xed,  0x7f,  0xe8,  0x4e,  0x2a,  0x55,  0x00,  0x7b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x73,  0x74,  0x64,  0x5f, 
 0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a, 
 0x3a,  0x48,  0x65,  0x61,  0x64,  0x65,  0x72,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x47,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xd4, 
 0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x09,  0x00,  0x00,  0x00,  0x66,  0x72,  0x61,  0x6d, 
 0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d,  0xfe, 
 0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0x00,  0x00,  0x72,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x2d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x62,  0x75,  0x69,  0x6c, 
 0x74,  0x69,  0x6e,  0x5f,  0x69,  0x6e,  0x74,  0x65,  0x72,  0x66,  0x61,  0x63,  0x65,  0x73,  0x3a,  0x3a, 
 0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x54,  0x69,  0x6d,  0x65,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x7c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf2,  0x4b,  0x79,  0x24,  0x06,  0xa4,  0xb5,  0xef, 
 0x45,  0xc2,  0xe7,  0x42,  0xaf,  0x92,  0xb1,  0xf1,  0x13,  0x36,  0x21,  0xa7,  0x40,  0xc5,  0x67,  0x60, 
 0xdb,  0x31,  0xd2,  0xb3,  0xa0,  0x1c,  0xf2,  0x33,  0xf7,  0x7f,  0x1e,  0x1a,  0x8e,  0x97,  0x8a,  0x6f, 
 0xda,  0xe6,  0xdf,  0xa9,  0xb6,  0xf1,  0xbd,  0xe7,  0xe1,  0x60,  0xec,  0x3a,  0x53,  0x6a,  0x94,  0x0c, 
 0x92,  0x0f,  0x97,  0x0b,  0xf2,  0xe5,  0x76,  0x5e,  0xc4,  0x8c,  0xff,  0xd4,  0x19,  0xed,  0x7f,  0xe8, 
 0x4e,  0x2a,  0x55,  0xf1,  0xdc,  0xf1,  0x2c,  0xd2,  0xdd,  0x5e,  0x71,  0x2c,  0xb7,  0xb1,  0xe5,  0x1f, 
 0xa3,  0xf2,  0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32, 
 0x0d,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d, 
};
  return blob;
}
template<> inline const uint8_t * TopicTraits<::unitree_interfaces::msg::dds_::PcToImage_>::type_info_blob() {
  static const uint8_t blob[] = {
 0xf0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x13,  0x36,  0x21,  0xa7,  0x40,  0xc5,  0x67,  0x60,  0xdb,  0x31,  0xd2, 
 0xb3,  0xa0,  0x1c,  0x00,  0x65,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xbd,  0xe7,  0xe1,  0x60,  0xec,  0x3a,  0x53, 
 0x6a,  0x94,  0x0c,  0x92,  0x0f,  0x97,  0x0b,  0x00,  0x9c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xdc,  0xf1,  0x2c,  0xd2,  0xdd,  0x5e,  0x71,  0x2c,  0xb7,  0xb1,  0xe5,  0x1f,  0xa3,  0xf2,  0x00, 
 0x48,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b, 
 0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x00,  0x37,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x4b,  0x79,  0x24, 
 0x06,  0xa4,  0xb5,  0xef,  0x45,  0xc2,  0xe7,  0x42,  0xaf,  0x92,  0xb1,  0x00,  0xb9,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x33,  0xf7,  0x7f,  0x1e,  0x1a,  0x8e,  0x97,  0x8a,  0x6f,  0xda,  0xe6,  0xdf,  0xa9,  0xb6,  0x00, 
 0x10,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xe5,  0x76,  0x5e,  0xc4,  0x8c,  0xff,  0xd4, 
 0x19,  0xed,  0x7f,  0xe8,  0x4e,  0x2a,  0x55,  0x00,  0x7f,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0x00, 
 0x76,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_interfaces::msg::dds_::PcToImage_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_interfaces::msg::dds_::PcToImage_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_interfaces::msg::dds_::PcToImage_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_interfaces::msg::dds_::PcToImage_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_interfaces::msg::dds_::PcToImage_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.res_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.image_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_interfaces::msg::dds_::PcToImage_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::PcToImage_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_interfaces::msg::dds_::PcToImage_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.res_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.image_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_interfaces::msg::dds_::PcToImage_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::PcToImage_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_interfaces::msg::dds_::PcToImage_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.res_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.image_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_interfaces::msg::dds_::PcToImage_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::PcToImage_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_interfaces::msg::dds_::PcToImage_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.res_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.image_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_interfaces::msg::dds_::PcToImage_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::PcToImage_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_PCTOIMAGE__HPP
