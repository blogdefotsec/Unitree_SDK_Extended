/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: MultiArrayDimension_.idl
  Source: MultiArrayDimension_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_MULTIARRAYDIMENSION__HPP
#define DDSCXX_MULTIARRAYDIMENSION__HPP

#include <cstdint>
#include <string>

namespace graph_msg
{
namespace msg
{
namespace dds_
{
class MultiArrayDimension_
{
private:
 std::string label__;
 uint32_t size__ = 0;
 uint32_t stride__ = 0;

public:
  MultiArrayDimension_() = default;

  explicit MultiArrayDimension_(
    const std::string& label_,
    uint32_t size_,
    uint32_t stride_) :
    label__(label_),
    size__(size_),
    stride__(stride_) { }

  const std::string& label_() const { return this->label__; }
  std::string& label_() { return this->label__; }
  void label_(const std::string& _val_) { this->label__ = _val_; }
  void label_(std::string&& _val_) { this->label__ = _val_; }
  uint32_t size_() const { return this->size__; }
  uint32_t& size_() { return this->size__; }
  void size_(uint32_t _val_) { this->size__ = _val_; }
  uint32_t stride_() const { return this->stride__; }
  uint32_t& stride_() { return this->stride__; }
  void stride_(uint32_t _val_) { this->stride__ = _val_; }

  bool operator==(const MultiArrayDimension_& _other) const
  {
    (void) _other;
    return label__ == _other.label__ &&
      size__ == _other.size__ &&
      stride__ == _other.stride__;
  }

  bool operator!=(const MultiArrayDimension_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::graph_msg::msg::dds_::MultiArrayDimension_>::getTypeName()
{
  return "graph_msg::msg::dds_::MultiArrayDimension_";
}

template <> constexpr bool TopicTraits<::graph_msg::msg::dds_::MultiArrayDimension_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::graph_msg::msg::dds_::MultiArrayDimension_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::graph_msg::msg::dds_::MultiArrayDimension_>::type_map_blob_sz() { return 310; }
template<> constexpr unsigned int TopicTraits<::graph_msg::msg::dds_::MultiArrayDimension_>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::graph_msg::msg::dds_::MultiArrayDimension_>::type_map_blob() {
  static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68, 
 0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x8e,  0x72,  0x17,  0x22, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x4e,  0xec,  0xfb,  0x50,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x3a,  0x74,  0xf1,  0x5f,  0x00, 
 0xaa,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25, 
 0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0x00,  0x92,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2b,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70, 
 0x68,  0x5f,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f, 
 0x3a,  0x3a,  0x4d,  0x75,  0x6c,  0x74,  0x69,  0x41,  0x72,  0x72,  0x61,  0x79,  0x44,  0x69,  0x6d,  0x65, 
 0x6e,  0x73,  0x69,  0x6f,  0x6e,  0x5f,  0x00,  0x00,  0x52,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x6c,  0x61,  0x62,  0x65,  0x6c,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00,  0x73,  0x69,  0x7a,  0x65, 
 0x5f,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x73,  0x74,  0x72,  0x69,  0x64,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25, 
 0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68,  0x1a, 
 0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::graph_msg::msg::dds_::MultiArrayDimension_>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68,  0x1a,  0x8e,  0x0b,  0xfd, 
 0xdd,  0x15,  0x45,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b, 
 0x8e,  0x80,  0x0e,  0x00,  0x96,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::graph_msg::msg::dds_::MultiArrayDimension_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::graph_msg::msg::dds_::MultiArrayDimension_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::graph_msg::msg::dds_::MultiArrayDimension_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::graph_msg::msg::dds_::MultiArrayDimension_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::graph_msg::msg::dds_::MultiArrayDimension_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.label_(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.size_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.stride_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::graph_msg::msg::dds_::MultiArrayDimension_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::MultiArrayDimension_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::graph_msg::msg::dds_::MultiArrayDimension_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.label_(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.size_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.stride_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::graph_msg::msg::dds_::MultiArrayDimension_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::MultiArrayDimension_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::graph_msg::msg::dds_::MultiArrayDimension_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.label_(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.size_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.stride_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::graph_msg::msg::dds_::MultiArrayDimension_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::MultiArrayDimension_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::graph_msg::msg::dds_::MultiArrayDimension_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.label_(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.size_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.stride_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::graph_msg::msg::dds_::MultiArrayDimension_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::MultiArrayDimension_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_MULTIARRAYDIMENSION__HPP
