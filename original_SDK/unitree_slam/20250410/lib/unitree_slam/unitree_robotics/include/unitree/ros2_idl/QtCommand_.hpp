/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: QtCommand_.idl
  Source: QtCommand_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_QTCOMMAND__HPP
#define DDSCXX_QTCOMMAND__HPP

#include "String_.hpp"

#include <cstdint>
#include <vector>

namespace unitree_interfaces
{
namespace msg
{
namespace dds_
{
class QtCommand_
{
private:
 uint8_t command__ = 0;
 ::std_msgs::msg::dds_::String_ seq__;
 uint8_t attribute__ = 0;
 std::vector<uint16_t> floor_index__;
 std::vector<uint16_t> pcdmap_index__;
 std::vector<uint16_t> topomap_index__;
 std::vector<uint16_t> node_edge_name__;
 float quaternion_x__ = 0.0f;
 float quaternion_y__ = 0.0f;
 float quaternion_z__ = 0.0f;
 float quaternion_w__ = 0.0f;
 float euler_roll__ = 0.0f;
 float euler_pitch__ = 0.0f;
 float euler_yaw__ = 0.0f;
 float translation_x__ = 0.0f;
 float translation_y__ = 0.0f;
 float translation_z__ = 0.0f;
 std::vector<uint16_t> state_1__;
 std::vector<float> state_2__;

public:
  QtCommand_() = default;

  explicit QtCommand_(
    uint8_t command_,
    const ::std_msgs::msg::dds_::String_& seq_,
    uint8_t attribute_,
    const std::vector<uint16_t>& floor_index_,
    const std::vector<uint16_t>& pcdmap_index_,
    const std::vector<uint16_t>& topomap_index_,
    const std::vector<uint16_t>& node_edge_name_,
    float quaternion_x_,
    float quaternion_y_,
    float quaternion_z_,
    float quaternion_w_,
    float euler_roll_,
    float euler_pitch_,
    float euler_yaw_,
    float translation_x_,
    float translation_y_,
    float translation_z_,
    const std::vector<uint16_t>& state_1_,
    const std::vector<float>& state_2_) :
    command__(command_),
    seq__(seq_),
    attribute__(attribute_),
    floor_index__(floor_index_),
    pcdmap_index__(pcdmap_index_),
    topomap_index__(topomap_index_),
    node_edge_name__(node_edge_name_),
    quaternion_x__(quaternion_x_),
    quaternion_y__(quaternion_y_),
    quaternion_z__(quaternion_z_),
    quaternion_w__(quaternion_w_),
    euler_roll__(euler_roll_),
    euler_pitch__(euler_pitch_),
    euler_yaw__(euler_yaw_),
    translation_x__(translation_x_),
    translation_y__(translation_y_),
    translation_z__(translation_z_),
    state_1__(state_1_),
    state_2__(state_2_) { }

  uint8_t command_() const { return this->command__; }
  uint8_t& command_() { return this->command__; }
  void command_(uint8_t _val_) { this->command__ = _val_; }
  const ::std_msgs::msg::dds_::String_& seq_() const { return this->seq__; }
  ::std_msgs::msg::dds_::String_& seq_() { return this->seq__; }
  void seq_(const ::std_msgs::msg::dds_::String_& _val_) { this->seq__ = _val_; }
  void seq_(::std_msgs::msg::dds_::String_&& _val_) { this->seq__ = _val_; }
  uint8_t attribute_() const { return this->attribute__; }
  uint8_t& attribute_() { return this->attribute__; }
  void attribute_(uint8_t _val_) { this->attribute__ = _val_; }
  const std::vector<uint16_t>& floor_index_() const { return this->floor_index__; }
  std::vector<uint16_t>& floor_index_() { return this->floor_index__; }
  void floor_index_(const std::vector<uint16_t>& _val_) { this->floor_index__ = _val_; }
  void floor_index_(std::vector<uint16_t>&& _val_) { this->floor_index__ = _val_; }
  const std::vector<uint16_t>& pcdmap_index_() const { return this->pcdmap_index__; }
  std::vector<uint16_t>& pcdmap_index_() { return this->pcdmap_index__; }
  void pcdmap_index_(const std::vector<uint16_t>& _val_) { this->pcdmap_index__ = _val_; }
  void pcdmap_index_(std::vector<uint16_t>&& _val_) { this->pcdmap_index__ = _val_; }
  const std::vector<uint16_t>& topomap_index_() const { return this->topomap_index__; }
  std::vector<uint16_t>& topomap_index_() { return this->topomap_index__; }
  void topomap_index_(const std::vector<uint16_t>& _val_) { this->topomap_index__ = _val_; }
  void topomap_index_(std::vector<uint16_t>&& _val_) { this->topomap_index__ = _val_; }
  const std::vector<uint16_t>& node_edge_name_() const { return this->node_edge_name__; }
  std::vector<uint16_t>& node_edge_name_() { return this->node_edge_name__; }
  void node_edge_name_(const std::vector<uint16_t>& _val_) { this->node_edge_name__ = _val_; }
  void node_edge_name_(std::vector<uint16_t>&& _val_) { this->node_edge_name__ = _val_; }
  float quaternion_x_() const { return this->quaternion_x__; }
  float& quaternion_x_() { return this->quaternion_x__; }
  void quaternion_x_(float _val_) { this->quaternion_x__ = _val_; }
  float quaternion_y_() const { return this->quaternion_y__; }
  float& quaternion_y_() { return this->quaternion_y__; }
  void quaternion_y_(float _val_) { this->quaternion_y__ = _val_; }
  float quaternion_z_() const { return this->quaternion_z__; }
  float& quaternion_z_() { return this->quaternion_z__; }
  void quaternion_z_(float _val_) { this->quaternion_z__ = _val_; }
  float quaternion_w_() const { return this->quaternion_w__; }
  float& quaternion_w_() { return this->quaternion_w__; }
  void quaternion_w_(float _val_) { this->quaternion_w__ = _val_; }
  float euler_roll_() const { return this->euler_roll__; }
  float& euler_roll_() { return this->euler_roll__; }
  void euler_roll_(float _val_) { this->euler_roll__ = _val_; }
  float euler_pitch_() const { return this->euler_pitch__; }
  float& euler_pitch_() { return this->euler_pitch__; }
  void euler_pitch_(float _val_) { this->euler_pitch__ = _val_; }
  float euler_yaw_() const { return this->euler_yaw__; }
  float& euler_yaw_() { return this->euler_yaw__; }
  void euler_yaw_(float _val_) { this->euler_yaw__ = _val_; }
  float translation_x_() const { return this->translation_x__; }
  float& translation_x_() { return this->translation_x__; }
  void translation_x_(float _val_) { this->translation_x__ = _val_; }
  float translation_y_() const { return this->translation_y__; }
  float& translation_y_() { return this->translation_y__; }
  void translation_y_(float _val_) { this->translation_y__ = _val_; }
  float translation_z_() const { return this->translation_z__; }
  float& translation_z_() { return this->translation_z__; }
  void translation_z_(float _val_) { this->translation_z__ = _val_; }
  const std::vector<uint16_t>& state_1_() const { return this->state_1__; }
  std::vector<uint16_t>& state_1_() { return this->state_1__; }
  void state_1_(const std::vector<uint16_t>& _val_) { this->state_1__ = _val_; }
  void state_1_(std::vector<uint16_t>&& _val_) { this->state_1__ = _val_; }
  const std::vector<float>& state_2_() const { return this->state_2__; }
  std::vector<float>& state_2_() { return this->state_2__; }
  void state_2_(const std::vector<float>& _val_) { this->state_2__ = _val_; }
  void state_2_(std::vector<float>&& _val_) { this->state_2__ = _val_; }

  bool operator==(const QtCommand_& _other) const
  {
    (void) _other;
    return command__ == _other.command__ &&
      seq__ == _other.seq__ &&
      attribute__ == _other.attribute__ &&
      floor_index__ == _other.floor_index__ &&
      pcdmap_index__ == _other.pcdmap_index__ &&
      topomap_index__ == _other.topomap_index__ &&
      node_edge_name__ == _other.node_edge_name__ &&
      quaternion_x__ == _other.quaternion_x__ &&
      quaternion_y__ == _other.quaternion_y__ &&
      quaternion_z__ == _other.quaternion_z__ &&
      quaternion_w__ == _other.quaternion_w__ &&
      euler_roll__ == _other.euler_roll__ &&
      euler_pitch__ == _other.euler_pitch__ &&
      euler_yaw__ == _other.euler_yaw__ &&
      translation_x__ == _other.translation_x__ &&
      translation_y__ == _other.translation_y__ &&
      translation_z__ == _other.translation_z__ &&
      state_1__ == _other.state_1__ &&
      state_2__ == _other.state_2__;
  }

  bool operator!=(const QtCommand_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_interfaces::msg::dds_::QtCommand_>::getTypeName()
{
  return "unitree_interfaces::msg::dds_::QtCommand_";
}

template <> constexpr bool TopicTraits<::unitree_interfaces::msg::dds_::QtCommand_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::unitree_interfaces::msg::dds_::QtCommand_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::unitree_interfaces::msg::dds_::QtCommand_>::type_map_blob_sz() { return 1360; }
template<> constexpr unsigned int TopicTraits<::unitree_interfaces::msg::dds_::QtCommand_>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::unitree_interfaces::msg::dds_::QtCommand_>::type_map_blob() {
  static const uint8_t blob[] = {
 0xbc,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0x29,  0xd4,  0x29,  0x90,  0x6a,  0x92,  0x40, 
 0xf1,  0xe8,  0xe5,  0xe1,  0x6d,  0xac,  0x9e,  0x00,  0x6c,  0x01,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x5c,  0x01,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0xe2,  0x2d,  0x11,  0x58,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a, 
 0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0xea,  0x52,  0x04,  0x93,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x8e,  0x33,  0x94,  0xec,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06, 
 0xbe,  0xb9,  0x31,  0x6f,  0x10,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0xdf,  0xab,  0xed,  0xef,  0x10,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0xd0,  0x69,  0x9c,  0x13,  0x10,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0xae,  0xa9,  0xae,  0x9b, 
 0x0b,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x02,  0x2b,  0x43,  0xfe,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x5f,  0x07,  0xe4,  0x71,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xdd,  0x2f,  0x85,  0xee,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xf2,  0xde,  0xc4,  0x36,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x4f,  0xf3,  0x42,  0x54,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x05,  0x61,  0x3f,  0x28,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x30,  0x4d,  0x0a,  0x12,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x9f,  0x56,  0x7c,  0xc3,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x7b,  0xcf,  0xa7,  0x1d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x9b,  0xde,  0xd7,  0x7a,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06, 
 0xd5,  0x54,  0x4b,  0x89,  0x10,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x09,  0x75,  0xec,  0xdc,  0x8a,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a,  0xb9,  0x26, 
 0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0x00,  0x24,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x8d,  0x77,  0x7f,  0x38, 
 0x47,  0x03,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0xa4,  0xec,  0x21,  0x74,  0xae,  0x2f,  0xde, 
 0x56,  0x9e,  0x59,  0x73,  0x93,  0x1b,  0xd7,  0x00,  0xcb,  0x02,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x32,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00,  0x75,  0x6e,  0x69,  0x74, 
 0x72,  0x65,  0x65,  0x5f,  0x69,  0x6e,  0x74,  0x65,  0x72,  0x66,  0x61,  0x63,  0x65,  0x73,  0x3a,  0x3a, 
 0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x51,  0x74,  0x43,  0x6f,  0x6d, 
 0x6d,  0x61,  0x6e,  0x64,  0x5f,  0x00,  0x00,  0x00,  0x8b,  0x02,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x63,  0x6f,  0x6d,  0x6d,  0x61,  0x6e,  0x64,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad, 
 0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x73,  0x65,  0x71,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x61,  0x74,  0x74,  0x72,  0x69,  0x62,  0x75,  0x74,  0x65,  0x5f,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0x0d,  0x00,  0x00,  0x00,  0x66,  0x6c,  0x6f,  0x6f,  0x72,  0x5f,  0x69,  0x6e, 
 0x64,  0x65,  0x78,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x0e,  0x00,  0x00,  0x00,  0x70,  0x63,  0x64,  0x6d, 
 0x61,  0x70,  0x5f,  0x69,  0x6e,  0x64,  0x65,  0x78,  0x5f,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x0f,  0x00,  0x00,  0x00, 
 0x74,  0x6f,  0x70,  0x6f,  0x6d,  0x61,  0x70,  0x5f,  0x69,  0x6e,  0x64,  0x65,  0x78,  0x5f,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0x10,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x65,  0x64,  0x67, 
 0x65,  0x5f,  0x6e,  0x61,  0x6d,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x71,  0x75,  0x61,  0x74, 
 0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e,  0x5f,  0x78,  0x5f,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x71,  0x75,  0x61,  0x74, 
 0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e,  0x5f,  0x79,  0x5f,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x71,  0x75,  0x61,  0x74, 
 0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e,  0x5f,  0x7a,  0x5f,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x71,  0x75,  0x61,  0x74, 
 0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e,  0x5f,  0x77,  0x5f,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x65,  0x75,  0x6c,  0x65, 
 0x72,  0x5f,  0x72,  0x6f,  0x6c,  0x6c,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x65,  0x75,  0x6c,  0x65, 
 0x72,  0x5f,  0x70,  0x69,  0x74,  0x63,  0x68,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x0d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x65,  0x75,  0x6c,  0x65, 
 0x72,  0x5f,  0x79,  0x61,  0x77,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x0e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x74,  0x72,  0x61,  0x6e, 
 0x73,  0x6c,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x5f,  0x78,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1d,  0x00,  0x00,  0x00,  0x0f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x0f,  0x00,  0x00,  0x00, 
 0x74,  0x72,  0x61,  0x6e,  0x73,  0x6c,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x5f,  0x79,  0x5f,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x0f,  0x00,  0x00,  0x00,  0x74,  0x72,  0x61,  0x6e,  0x73,  0x6c,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x5f, 
 0x7a,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x09,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x74, 
 0x65,  0x5f,  0x31,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x09,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x74, 
 0x65,  0x5f,  0x32,  0x5f,  0x00,  0x00,  0x00,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f, 
 0xad,  0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00,  0x00,  0x4f,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x73,  0x74,  0x64,  0x5f, 
 0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a, 
 0x3a,  0x53,  0x74,  0x72,  0x69,  0x6e,  0x67,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0xf2,  0xa4,  0xec,  0x21,  0x74,  0xae,  0x2f,  0xde,  0x56,  0x9e,  0x59,  0x73, 
 0x93,  0x1b,  0xd7,  0xf1,  0x29,  0xd4,  0x29,  0x90,  0x6a,  0x92,  0x40,  0xf1,  0xe8,  0xe5,  0xe1,  0x6d, 
 0xac,  0x9e,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c, 
 0xc2,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a,  0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1, 
};
  return blob;
}
template<> inline const uint8_t * TopicTraits<::unitree_interfaces::msg::dds_::QtCommand_>::type_info_blob() {
  static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x29,  0xd4,  0x29,  0x90,  0x6a,  0x92,  0x40,  0xf1,  0xe8,  0xe5,  0xe1, 
 0x6d,  0xac,  0x9e,  0x00,  0x70,  0x01,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a,  0xb9,  0x26, 
 0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0x00,  0x28,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xa4,  0xec,  0x21, 
 0x74,  0xae,  0x2f,  0xde,  0x56,  0x9e,  0x59,  0x73,  0x93,  0x1b,  0xd7,  0x00,  0xcf,  0x02,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00, 
 0x53,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_interfaces::msg::dds_::QtCommand_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_interfaces::msg::dds_::QtCommand_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_interfaces::msg::dds_::QtCommand_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_interfaces::msg::dds_::QtCommand_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_interfaces::msg::dds_::QtCommand_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.command_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.attribute_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.floor_index_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.floor_index_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pcdmap_index_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.pcdmap_index_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.topomap_index_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.topomap_index_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.node_edge_name_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.node_edge_name_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.quaternion_x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.quaternion_y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.quaternion_z_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.quaternion_w_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.euler_roll_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.euler_pitch_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.euler_yaw_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.translation_x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.translation_y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 16:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.translation_z_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 17:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.state_1_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.state_1_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 18:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.state_2_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.state_2_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_interfaces::msg::dds_::QtCommand_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::QtCommand_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_interfaces::msg::dds_::QtCommand_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.command_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.attribute_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.floor_index_().size());
      if (!read(streamer, se_1))
        return false;
      instance.floor_index_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.floor_index_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pcdmap_index_().size());
      if (!read(streamer, se_1))
        return false;
      instance.pcdmap_index_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.pcdmap_index_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.topomap_index_().size());
      if (!read(streamer, se_1))
        return false;
      instance.topomap_index_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.topomap_index_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.node_edge_name_().size());
      if (!read(streamer, se_1))
        return false;
      instance.node_edge_name_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.node_edge_name_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.quaternion_x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.quaternion_y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.quaternion_z_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.quaternion_w_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.euler_roll_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.euler_pitch_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.euler_yaw_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.translation_x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.translation_y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 16:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.translation_z_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 17:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.state_1_().size());
      if (!read(streamer, se_1))
        return false;
      instance.state_1_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.state_1_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 18:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.state_2_().size());
      if (!read(streamer, se_1))
        return false;
      instance.state_2_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.state_2_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_interfaces::msg::dds_::QtCommand_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::QtCommand_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_interfaces::msg::dds_::QtCommand_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.command_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.attribute_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.floor_index_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.pcdmap_index_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.topomap_index_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.node_edge_name_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.quaternion_x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.quaternion_y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.quaternion_z_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.quaternion_w_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.euler_roll_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.euler_pitch_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.euler_yaw_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.translation_x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.translation_y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 16:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.translation_z_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 17:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.state_1_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 18:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.state_2_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_interfaces::msg::dds_::QtCommand_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::QtCommand_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_interfaces::msg::dds_::QtCommand_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.command_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.attribute_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.quaternion_x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.quaternion_y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.quaternion_z_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.quaternion_w_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.euler_roll_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.euler_pitch_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.euler_yaw_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.translation_x_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.translation_y_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 16:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.translation_z_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 17:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, uint16_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 18:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_interfaces::msg::dds_::QtCommand_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::QtCommand_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_QTCOMMAND__HPP
