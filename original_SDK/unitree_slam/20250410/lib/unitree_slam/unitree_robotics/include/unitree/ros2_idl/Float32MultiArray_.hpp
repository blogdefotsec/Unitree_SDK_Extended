/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: Float32MultiArray_.idl
  Source: Float32MultiArray_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_FLOAT32MULTIARRAY__HPP
#define DDSCXX_FLOAT32MULTIARRAY__HPP

#include "MultiArrayLayout_.hpp"

#include <vector>

namespace graph_msg
{
namespace msg
{
namespace dds_
{
class Float32MultiArray_
{
private:
 ::graph_msg::msg::dds_::MultiArrayLayout_ layout__;
 std::vector<float> data__;

public:
  Float32MultiArray_() = default;

  explicit Float32MultiArray_(
    const ::graph_msg::msg::dds_::MultiArrayLayout_& layout_,
    const std::vector<float>& data_) :
    layout__(layout_),
    data__(data_) { }

  const ::graph_msg::msg::dds_::MultiArrayLayout_& layout_() const { return this->layout__; }
  ::graph_msg::msg::dds_::MultiArrayLayout_& layout_() { return this->layout__; }
  void layout_(const ::graph_msg::msg::dds_::MultiArrayLayout_& _val_) { this->layout__ = _val_; }
  void layout_(::graph_msg::msg::dds_::MultiArrayLayout_&& _val_) { this->layout__ = _val_; }
  const std::vector<float>& data_() const { return this->data__; }
  std::vector<float>& data_() { return this->data__; }
  void data_(const std::vector<float>& _val_) { this->data__ = _val_; }
  void data_(std::vector<float>&& _val_) { this->data__ = _val_; }

  bool operator==(const Float32MultiArray_& _other) const
  {
    (void) _other;
    return layout__ == _other.layout__ &&
      data__ == _other.data__;
  }

  bool operator!=(const Float32MultiArray_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::graph_msg::msg::dds_::Float32MultiArray_>::getTypeName()
{
  return "graph_msg::msg::dds_::Float32MultiArray_";
}

template <> constexpr bool TopicTraits<::graph_msg::msg::dds_::Float32MultiArray_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::graph_msg::msg::dds_::Float32MultiArray_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::graph_msg::msg::dds_::Float32MultiArray_>::type_map_blob_sz() { return 874; }
template<> constexpr unsigned int TopicTraits<::graph_msg::msg::dds_::Float32MultiArray_>::type_info_blob_sz() { return 196; }
template<> inline const uint8_t * TopicTraits<::graph_msg::msg::dds_::Float32MultiArray_>::type_map_blob() {
  static const uint8_t blob[] = {
 0x13,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf1,  0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9, 
 0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05,  0x23,  0x00,  0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x38,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4, 
 0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3,  0xd7,  0x10,  0x44,  0xd1,  0xa2,  0x03,  0x96,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09, 
 0x1f,  0xc8,  0xc0,  0x53,  0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3, 
 0xd7,  0x10,  0x44,  0x00,  0x47,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x37,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x00,  0xf1,  0x24,  0x7a,  0x23,  0x10, 
 0x66,  0x66,  0x68,  0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x7a,  0xe0,  0xb4,  0x74,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x14,  0x4c,  0xaa,  0x23,  0xf1, 
 0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68,  0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x00,  0x00, 
 0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x70,  0x00,  0x8e,  0x72,  0x17,  0x22,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x4e,  0xec,  0xfb,  0x50,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x3a,  0x74,  0xf1,  0x5f,  0x00,  0xea,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0xf2,  0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50,  0x10,  0x5f,  0x2a,  0x00, 
 0x8c,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x31,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x29,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x6d, 
 0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x46,  0x6c,  0x6f,  0x61,  0x74,  0x33, 
 0x32,  0x4d,  0x75,  0x6c,  0x74,  0x69,  0x41,  0x72,  0x72,  0x61,  0x79,  0x5f,  0x00,  0x00,  0x00,  0x00, 
 0x4c,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a,  0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a, 
 0x21,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6c,  0x61,  0x79,  0x6f,  0x75,  0x74,  0x5f,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x09,  0x06,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x5f,  0x00,  0x00,  0x00, 
 0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a,  0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a,  0x21,  0x00, 
 0x8b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x30,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x28,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x6d, 
 0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4d,  0x75,  0x6c,  0x74,  0x69,  0x41, 
 0x72,  0x72,  0x61,  0x79,  0x4c,  0x61,  0x79,  0x6f,  0x75,  0x74,  0x5f,  0x00,  0x4f,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2, 
 0x01,  0x00,  0x00,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e, 
 0x80,  0x0e,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x64,  0x69,  0x6d,  0x5f,  0x00,  0x00,  0x00,  0x00, 
 0x1b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x0d,  0x00,  0x00,  0x00, 
 0x64,  0x61,  0x74,  0x61,  0x5f,  0x6f,  0x66,  0x66,  0x73,  0x65,  0x74,  0x5f,  0x00,  0x00,  0x00,  0xf2, 
 0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0x00,  0x00, 
 0x92,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x33,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x2b,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x6d, 
 0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4d,  0x75,  0x6c,  0x74,  0x69,  0x41, 
 0x72,  0x72,  0x61,  0x79,  0x44,  0x69,  0x6d,  0x65,  0x6e,  0x73,  0x69,  0x6f,  0x6e,  0x5f,  0x00,  0x00, 
 0x52,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x70,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6c,  0x61,  0x62,  0x65,  0x6c,  0x5f,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x73,  0x69,  0x7a,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x73,  0x74,  0x72,  0x69, 
 0x64,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0xf2,  0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50,  0x10,  0x5f,  0x2a,  0xf1, 
 0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9,  0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05,  0x23,  0xf2,  0xb9, 
 0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a,  0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a,  0x21,  0xf1,  0x1b,  0xf9, 
 0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3,  0xd7,  0x10,  0x44,  0xf2,  0xc6,  0x70,  0x38, 
 0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0xf1,  0x24,  0x7a,  0x23,  0x10, 
 0x66,  0x66,  0x68,  0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::graph_msg::msg::dds_::Float32MultiArray_>::type_info_blob() {
  static const uint8_t blob[] = {
 0xc0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9,  0x47,  0xe9,  0x3a,  0x65, 
 0x7f,  0x05,  0x23,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f, 
 0xa1,  0x81,  0x15,  0xe3,  0xd7,  0x10,  0x44,  0x00,  0x4b,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68,  0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x00, 
 0x47,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50, 
 0x10,  0x5f,  0x2a,  0x00,  0x90,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a, 
 0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a,  0x21,  0x00,  0x8f,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0x00, 
 0x96,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::graph_msg::msg::dds_::Float32MultiArray_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::graph_msg::msg::dds_::Float32MultiArray_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::graph_msg::msg::dds_::Float32MultiArray_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::graph_msg::msg::dds_::Float32MultiArray_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::graph_msg::msg::dds_::Float32MultiArray_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.layout_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.data_().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.data_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::graph_msg::msg::dds_::Float32MultiArray_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::Float32MultiArray_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::graph_msg::msg::dds_::Float32MultiArray_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.layout_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.data_().size());
      if (!read(streamer, se_1))
        return false;
      instance.data_().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.data_()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::graph_msg::msg::dds_::Float32MultiArray_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::Float32MultiArray_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::graph_msg::msg::dds_::Float32MultiArray_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.layout_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.data_().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::graph_msg::msg::dds_::Float32MultiArray_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::Float32MultiArray_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::graph_msg::msg::dds_::Float32MultiArray_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.layout_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, float(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::graph_msg::msg::dds_::Float32MultiArray_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::Float32MultiArray_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_FLOAT32MULTIARRAY__HPP
