# generated from rosidl_generator_py/resource/_idl.py.em
# with input from unitree_interfaces:msg/QtCommand.idl
# generated code does not contain a copyright notice


# Import statements for member types

# Member 'floor_index'
# Member 'pcdmap_index'
# Member 'topomap_index'
# Member 'node_edge_name'
# Member 'state_1'
# Member 'state_2'
import array  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_QtCommand(type):
    """Metaclass of message 'QtCommand'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('unitree_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'unitree_interfaces.msg.QtCommand')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__qt_command
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__qt_command
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__qt_command
            cls._TYPE_SUPPORT = module.type_support_msg__msg__qt_command
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__qt_command

            from std_msgs.msg import String
            if String.__class__._TYPE_SUPPORT is None:
                String.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class QtCommand(metaclass=Metaclass_QtCommand):
    """Message class 'QtCommand'."""

    __slots__ = [
        '_command',
        '_seq',
        '_attribute',
        '_floor_index',
        '_pcdmap_index',
        '_topomap_index',
        '_node_edge_name',
        '_quaternion_x',
        '_quaternion_y',
        '_quaternion_z',
        '_quaternion_w',
        '_euler_roll',
        '_euler_pitch',
        '_euler_yaw',
        '_translation_x',
        '_translation_y',
        '_translation_z',
        '_state_1',
        '_state_2',
    ]

    _fields_and_field_types = {
        'command': 'uint8',
        'seq': 'std_msgs/String',
        'attribute': 'uint8',
        'floor_index': 'sequence<uint16>',
        'pcdmap_index': 'sequence<uint16>',
        'topomap_index': 'sequence<uint16>',
        'node_edge_name': 'sequence<uint16>',
        'quaternion_x': 'float',
        'quaternion_y': 'float',
        'quaternion_z': 'float',
        'quaternion_w': 'float',
        'euler_roll': 'float',
        'euler_pitch': 'float',
        'euler_yaw': 'float',
        'translation_x': 'float',
        'translation_y': 'float',
        'translation_z': 'float',
        'state_1': 'sequence<uint16>',
        'state_2': 'sequence<float>',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'String'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('float')),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.command = kwargs.get('command', int())
        from std_msgs.msg import String
        self.seq = kwargs.get('seq', String())
        self.attribute = kwargs.get('attribute', int())
        self.floor_index = array.array('H', kwargs.get('floor_index', []))
        self.pcdmap_index = array.array('H', kwargs.get('pcdmap_index', []))
        self.topomap_index = array.array('H', kwargs.get('topomap_index', []))
        self.node_edge_name = array.array('H', kwargs.get('node_edge_name', []))
        self.quaternion_x = kwargs.get('quaternion_x', float())
        self.quaternion_y = kwargs.get('quaternion_y', float())
        self.quaternion_z = kwargs.get('quaternion_z', float())
        self.quaternion_w = kwargs.get('quaternion_w', float())
        self.euler_roll = kwargs.get('euler_roll', float())
        self.euler_pitch = kwargs.get('euler_pitch', float())
        self.euler_yaw = kwargs.get('euler_yaw', float())
        self.translation_x = kwargs.get('translation_x', float())
        self.translation_y = kwargs.get('translation_y', float())
        self.translation_z = kwargs.get('translation_z', float())
        self.state_1 = array.array('H', kwargs.get('state_1', []))
        self.state_2 = array.array('f', kwargs.get('state_2', []))

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.command != other.command:
            return False
        if self.seq != other.seq:
            return False
        if self.attribute != other.attribute:
            return False
        if self.floor_index != other.floor_index:
            return False
        if self.pcdmap_index != other.pcdmap_index:
            return False
        if self.topomap_index != other.topomap_index:
            return False
        if self.node_edge_name != other.node_edge_name:
            return False
        if self.quaternion_x != other.quaternion_x:
            return False
        if self.quaternion_y != other.quaternion_y:
            return False
        if self.quaternion_z != other.quaternion_z:
            return False
        if self.quaternion_w != other.quaternion_w:
            return False
        if self.euler_roll != other.euler_roll:
            return False
        if self.euler_pitch != other.euler_pitch:
            return False
        if self.euler_yaw != other.euler_yaw:
            return False
        if self.translation_x != other.translation_x:
            return False
        if self.translation_y != other.translation_y:
            return False
        if self.translation_z != other.translation_z:
            return False
        if self.state_1 != other.state_1:
            return False
        if self.state_2 != other.state_2:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def command(self):
        """Message field 'command'."""
        return self._command

    @command.setter
    def command(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'command' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'command' field must be an unsigned integer in [0, 255]"
        self._command = value

    @property
    def seq(self):
        """Message field 'seq'."""
        return self._seq

    @seq.setter
    def seq(self, value):
        if __debug__:
            from std_msgs.msg import String
            assert \
                isinstance(value, String), \
                "The 'seq' field must be a sub message of type 'String'"
        self._seq = value

    @property
    def attribute(self):
        """Message field 'attribute'."""
        return self._attribute

    @attribute.setter
    def attribute(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'attribute' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'attribute' field must be an unsigned integer in [0, 255]"
        self._attribute = value

    @property
    def floor_index(self):
        """Message field 'floor_index'."""
        return self._floor_index

    @floor_index.setter
    def floor_index(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'floor_index' array.array() must have the type code of 'H'"
            self._floor_index = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'floor_index' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._floor_index = array.array('H', value)

    @property
    def pcdmap_index(self):
        """Message field 'pcdmap_index'."""
        return self._pcdmap_index

    @pcdmap_index.setter
    def pcdmap_index(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'pcdmap_index' array.array() must have the type code of 'H'"
            self._pcdmap_index = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'pcdmap_index' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._pcdmap_index = array.array('H', value)

    @property
    def topomap_index(self):
        """Message field 'topomap_index'."""
        return self._topomap_index

    @topomap_index.setter
    def topomap_index(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'topomap_index' array.array() must have the type code of 'H'"
            self._topomap_index = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'topomap_index' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._topomap_index = array.array('H', value)

    @property
    def node_edge_name(self):
        """Message field 'node_edge_name'."""
        return self._node_edge_name

    @node_edge_name.setter
    def node_edge_name(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'node_edge_name' array.array() must have the type code of 'H'"
            self._node_edge_name = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'node_edge_name' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._node_edge_name = array.array('H', value)

    @property
    def quaternion_x(self):
        """Message field 'quaternion_x'."""
        return self._quaternion_x

    @quaternion_x.setter
    def quaternion_x(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'quaternion_x' field must be of type 'float'"
        self._quaternion_x = value

    @property
    def quaternion_y(self):
        """Message field 'quaternion_y'."""
        return self._quaternion_y

    @quaternion_y.setter
    def quaternion_y(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'quaternion_y' field must be of type 'float'"
        self._quaternion_y = value

    @property
    def quaternion_z(self):
        """Message field 'quaternion_z'."""
        return self._quaternion_z

    @quaternion_z.setter
    def quaternion_z(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'quaternion_z' field must be of type 'float'"
        self._quaternion_z = value

    @property
    def quaternion_w(self):
        """Message field 'quaternion_w'."""
        return self._quaternion_w

    @quaternion_w.setter
    def quaternion_w(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'quaternion_w' field must be of type 'float'"
        self._quaternion_w = value

    @property
    def euler_roll(self):
        """Message field 'euler_roll'."""
        return self._euler_roll

    @euler_roll.setter
    def euler_roll(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'euler_roll' field must be of type 'float'"
        self._euler_roll = value

    @property
    def euler_pitch(self):
        """Message field 'euler_pitch'."""
        return self._euler_pitch

    @euler_pitch.setter
    def euler_pitch(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'euler_pitch' field must be of type 'float'"
        self._euler_pitch = value

    @property
    def euler_yaw(self):
        """Message field 'euler_yaw'."""
        return self._euler_yaw

    @euler_yaw.setter
    def euler_yaw(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'euler_yaw' field must be of type 'float'"
        self._euler_yaw = value

    @property
    def translation_x(self):
        """Message field 'translation_x'."""
        return self._translation_x

    @translation_x.setter
    def translation_x(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'translation_x' field must be of type 'float'"
        self._translation_x = value

    @property
    def translation_y(self):
        """Message field 'translation_y'."""
        return self._translation_y

    @translation_y.setter
    def translation_y(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'translation_y' field must be of type 'float'"
        self._translation_y = value

    @property
    def translation_z(self):
        """Message field 'translation_z'."""
        return self._translation_z

    @translation_z.setter
    def translation_z(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'translation_z' field must be of type 'float'"
        self._translation_z = value

    @property
    def state_1(self):
        """Message field 'state_1'."""
        return self._state_1

    @state_1.setter
    def state_1(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'state_1' array.array() must have the type code of 'H'"
            self._state_1 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'state_1' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._state_1 = array.array('H', value)

    @property
    def state_2(self):
        """Message field 'state_2'."""
        return self._state_2

    @state_2.setter
    def state_2(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'f', \
                "The 'state_2' array.array() must have the type code of 'f'"
            self._state_2 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'state_2' field must be a set or sequence and each value of type 'float'"
        self._state_2 = array.array('f', value)
