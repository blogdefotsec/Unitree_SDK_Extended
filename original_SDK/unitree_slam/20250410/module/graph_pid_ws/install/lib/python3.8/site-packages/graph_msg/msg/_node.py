# generated from rosidl_generator_py/resource/_idl.py.em
# with input from graph_msg:msg/Node.idl
# generated code does not contain a copyright notice


# Import statements for member types

# Member 'node_name'
# Member 'node_position_x'
# Member 'node_position_y'
# Member 'node_position_z'
# Member 'node_yaw'
# Member 'node_attribute'
# Member 'undefined'
# Member 'node_state_2'
# Member 'node_state_3'
import array  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_Node(type):
    """Metaclass of message 'Node'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('graph_msg')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'graph_msg.msg.Node')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__node
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__node
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__node
            cls._TYPE_SUPPORT = module.type_support_msg__msg__node
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__node

            from std_msgs.msg import Float32MultiArray
            if Float32MultiArray.__class__._TYPE_SUPPORT is None:
                Float32MultiArray.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class Node(metaclass=Metaclass_Node):
    """Message class 'Node'."""

    __slots__ = [
        '_node_name',
        '_node_position_x',
        '_node_position_y',
        '_node_position_z',
        '_node_yaw',
        '_node_attribute',
        '_undefined',
        '_node_state_2',
        '_node_state_3',
        '_node_state_list',
    ]

    _fields_and_field_types = {
        'node_name': 'sequence<uint16>',
        'node_position_x': 'sequence<float>',
        'node_position_y': 'sequence<float>',
        'node_position_z': 'sequence<float>',
        'node_yaw': 'sequence<float>',
        'node_attribute': 'sequence<uint16>',
        'undefined': 'sequence<uint16>',
        'node_state_2': 'sequence<uint16>',
        'node_state_3': 'sequence<uint16>',
        'node_state_list': 'sequence<std_msgs/Float32MultiArray>',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('float')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('float')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('float')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('float')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('uint16')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32MultiArray')),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.node_name = array.array('H', kwargs.get('node_name', []))
        self.node_position_x = array.array('f', kwargs.get('node_position_x', []))
        self.node_position_y = array.array('f', kwargs.get('node_position_y', []))
        self.node_position_z = array.array('f', kwargs.get('node_position_z', []))
        self.node_yaw = array.array('f', kwargs.get('node_yaw', []))
        self.node_attribute = array.array('H', kwargs.get('node_attribute', []))
        self.undefined = array.array('H', kwargs.get('undefined', []))
        self.node_state_2 = array.array('H', kwargs.get('node_state_2', []))
        self.node_state_3 = array.array('H', kwargs.get('node_state_3', []))
        self.node_state_list = kwargs.get('node_state_list', [])

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.node_name != other.node_name:
            return False
        if self.node_position_x != other.node_position_x:
            return False
        if self.node_position_y != other.node_position_y:
            return False
        if self.node_position_z != other.node_position_z:
            return False
        if self.node_yaw != other.node_yaw:
            return False
        if self.node_attribute != other.node_attribute:
            return False
        if self.undefined != other.undefined:
            return False
        if self.node_state_2 != other.node_state_2:
            return False
        if self.node_state_3 != other.node_state_3:
            return False
        if self.node_state_list != other.node_state_list:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def node_name(self):
        """Message field 'node_name'."""
        return self._node_name

    @node_name.setter
    def node_name(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'node_name' array.array() must have the type code of 'H'"
            self._node_name = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'node_name' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._node_name = array.array('H', value)

    @property
    def node_position_x(self):
        """Message field 'node_position_x'."""
        return self._node_position_x

    @node_position_x.setter
    def node_position_x(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'f', \
                "The 'node_position_x' array.array() must have the type code of 'f'"
            self._node_position_x = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'node_position_x' field must be a set or sequence and each value of type 'float'"
        self._node_position_x = array.array('f', value)

    @property
    def node_position_y(self):
        """Message field 'node_position_y'."""
        return self._node_position_y

    @node_position_y.setter
    def node_position_y(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'f', \
                "The 'node_position_y' array.array() must have the type code of 'f'"
            self._node_position_y = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'node_position_y' field must be a set or sequence and each value of type 'float'"
        self._node_position_y = array.array('f', value)

    @property
    def node_position_z(self):
        """Message field 'node_position_z'."""
        return self._node_position_z

    @node_position_z.setter
    def node_position_z(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'f', \
                "The 'node_position_z' array.array() must have the type code of 'f'"
            self._node_position_z = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'node_position_z' field must be a set or sequence and each value of type 'float'"
        self._node_position_z = array.array('f', value)

    @property
    def node_yaw(self):
        """Message field 'node_yaw'."""
        return self._node_yaw

    @node_yaw.setter
    def node_yaw(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'f', \
                "The 'node_yaw' array.array() must have the type code of 'f'"
            self._node_yaw = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'node_yaw' field must be a set or sequence and each value of type 'float'"
        self._node_yaw = array.array('f', value)

    @property
    def node_attribute(self):
        """Message field 'node_attribute'."""
        return self._node_attribute

    @node_attribute.setter
    def node_attribute(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'node_attribute' array.array() must have the type code of 'H'"
            self._node_attribute = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'node_attribute' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._node_attribute = array.array('H', value)

    @property
    def undefined(self):
        """Message field 'undefined'."""
        return self._undefined

    @undefined.setter
    def undefined(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'undefined' array.array() must have the type code of 'H'"
            self._undefined = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'undefined' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._undefined = array.array('H', value)

    @property
    def node_state_2(self):
        """Message field 'node_state_2'."""
        return self._node_state_2

    @node_state_2.setter
    def node_state_2(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'node_state_2' array.array() must have the type code of 'H'"
            self._node_state_2 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'node_state_2' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._node_state_2 = array.array('H', value)

    @property
    def node_state_3(self):
        """Message field 'node_state_3'."""
        return self._node_state_3

    @node_state_3.setter
    def node_state_3(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'H', \
                "The 'node_state_3' array.array() must have the type code of 'H'"
            self._node_state_3 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 65536 for val in value)), \
                "The 'node_state_3' field must be a set or sequence and each value of type 'int' and each unsigned integer in [0, 65535]"
        self._node_state_3 = array.array('H', value)

    @property
    def node_state_list(self):
        """Message field 'node_state_list'."""
        return self._node_state_list

    @node_state_list.setter
    def node_state_list(self, value):
        if __debug__:
            from std_msgs.msg import Float32MultiArray
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Float32MultiArray) for v in value) and
                 True), \
                "The 'node_state_list' field must be a set or sequence and each value of type 'Float32MultiArray'"
        self._node_state_list = value
