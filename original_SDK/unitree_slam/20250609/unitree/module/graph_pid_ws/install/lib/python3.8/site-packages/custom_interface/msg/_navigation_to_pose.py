# generated from rosidl_generator_py/resource/_idl.py.em
# with input from custom_interface:msg/NavigationToPose.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_NavigationToPose(type):
    """Metaclass of message 'NavigationToPose'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('custom_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'custom_interface.msg.NavigationToPose')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__navigation_to_pose
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__navigation_to_pose
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__navigation_to_pose
            cls._TYPE_SUPPORT = module.type_support_msg__msg__navigation_to_pose
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__navigation_to_pose

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class NavigationToPose(metaclass=Metaclass_NavigationToPose):
    """Message class 'NavigationToPose'."""

    __slots__ = [
        '_id',
        '_pose_x',
        '_pose_y',
        '_pose_z',
        '_quat_x',
        '_quat_y',
        '_quat_z',
        '_quat_w',
    ]

    _fields_and_field_types = {
        'id': 'string',
        'pose_x': 'double',
        'pose_y': 'double',
        'pose_z': 'double',
        'quat_x': 'double',
        'quat_y': 'double',
        'quat_z': 'double',
        'quat_w': 'double',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.id = kwargs.get('id', str())
        self.pose_x = kwargs.get('pose_x', float())
        self.pose_y = kwargs.get('pose_y', float())
        self.pose_z = kwargs.get('pose_z', float())
        self.quat_x = kwargs.get('quat_x', float())
        self.quat_y = kwargs.get('quat_y', float())
        self.quat_z = kwargs.get('quat_z', float())
        self.quat_w = kwargs.get('quat_w', float())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.id != other.id:
            return False
        if self.pose_x != other.pose_x:
            return False
        if self.pose_y != other.pose_y:
            return False
        if self.pose_z != other.pose_z:
            return False
        if self.quat_x != other.quat_x:
            return False
        if self.quat_y != other.quat_y:
            return False
        if self.quat_z != other.quat_z:
            return False
        if self.quat_w != other.quat_w:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property  # noqa: A003
    def id(self):  # noqa: A003
        """Message field 'id'."""
        return self._id

    @id.setter  # noqa: A003
    def id(self, value):  # noqa: A003
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'id' field must be of type 'str'"
        self._id = value

    @property
    def pose_x(self):
        """Message field 'pose_x'."""
        return self._pose_x

    @pose_x.setter
    def pose_x(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'pose_x' field must be of type 'float'"
        self._pose_x = value

    @property
    def pose_y(self):
        """Message field 'pose_y'."""
        return self._pose_y

    @pose_y.setter
    def pose_y(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'pose_y' field must be of type 'float'"
        self._pose_y = value

    @property
    def pose_z(self):
        """Message field 'pose_z'."""
        return self._pose_z

    @pose_z.setter
    def pose_z(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'pose_z' field must be of type 'float'"
        self._pose_z = value

    @property
    def quat_x(self):
        """Message field 'quat_x'."""
        return self._quat_x

    @quat_x.setter
    def quat_x(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'quat_x' field must be of type 'float'"
        self._quat_x = value

    @property
    def quat_y(self):
        """Message field 'quat_y'."""
        return self._quat_y

    @quat_y.setter
    def quat_y(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'quat_y' field must be of type 'float'"
        self._quat_y = value

    @property
    def quat_z(self):
        """Message field 'quat_z'."""
        return self._quat_z

    @quat_z.setter
    def quat_z(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'quat_z' field must be of type 'float'"
        self._quat_z = value

    @property
    def quat_w(self):
        """Message field 'quat_w'."""
        return self._quat_w

    @quat_w.setter
    def quat_w(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'quat_w' field must be of type 'float'"
        self._quat_w = value
