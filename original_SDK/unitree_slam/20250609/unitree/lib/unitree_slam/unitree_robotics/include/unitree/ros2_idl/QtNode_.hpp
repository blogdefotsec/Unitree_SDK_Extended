/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: QtNode_.idl
  Source: QtNode_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_QTNODE__HPP
#define DDSCXX_QTNODE__HPP

#include "Node_.hpp"

#include "String_.hpp"


namespace unitree_interfaces
{
namespace msg
{
namespace dds_
{
class QtNode_
{
private:
 ::std_msgs::msg::dds_::String_ seq__;
 ::graph_msg::msg::dds_::Node_ node__;

public:
  QtNode_() = default;

  explicit QtNode_(
    const ::std_msgs::msg::dds_::String_& seq_,
    const ::graph_msg::msg::dds_::Node_& node_) :
    seq__(seq_),
    node__(node_) { }

  const ::std_msgs::msg::dds_::String_& seq_() const { return this->seq__; }
  ::std_msgs::msg::dds_::String_& seq_() { return this->seq__; }
  void seq_(const ::std_msgs::msg::dds_::String_& _val_) { this->seq__ = _val_; }
  void seq_(::std_msgs::msg::dds_::String_&& _val_) { this->seq__ = _val_; }
  const ::graph_msg::msg::dds_::Node_& node_() const { return this->node__; }
  ::graph_msg::msg::dds_::Node_& node_() { return this->node__; }
  void node_(const ::graph_msg::msg::dds_::Node_& _val_) { this->node__ = _val_; }
  void node_(::graph_msg::msg::dds_::Node_&& _val_) { this->node__ = _val_; }

  bool operator==(const QtNode_& _other) const
  {
    (void) _other;
    return seq__ == _other.seq__ &&
      node__ == _other.node__;
  }

  bool operator!=(const QtNode_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_interfaces::msg::dds_::QtNode_>::getTypeName()
{
  return "unitree_interfaces::msg::dds_::QtNode_";
}

template <> constexpr bool TopicTraits<::unitree_interfaces::msg::dds_::QtNode_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::unitree_interfaces::msg::dds_::QtNode_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::unitree_interfaces::msg::dds_::QtNode_>::type_map_blob_sz() { return 2104; }
template<> constexpr unsigned int TopicTraits<::unitree_interfaces::msg::dds_::QtNode_>::type_info_blob_sz() { return 340; }
template<> inline const uint8_t * TopicTraits<::unitree_interfaces::msg::dds_::QtNode_>::type_map_blob() {
  static const uint8_t blob[] = {
 0xaf,  0x02,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0xf1,  0xbc,  0xdd,  0x9d,  0x18,  0x21,  0x46,  0x23, 
 0x49,  0x6f,  0x23,  0x75,  0x9d,  0xab,  0x8f,  0x00,  0x51,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a, 
 0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0xea,  0x52,  0x04,  0x93,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xc6,  0x00,  0xb0,  0x37,  0xde, 
 0x5d,  0x95,  0x71,  0x7d,  0xdc,  0x33,  0x5c,  0x07,  0xcc,  0x5a,  0x45,  0x26,  0x85,  0xf1,  0x59,  0x65, 
 0x6d,  0x08,  0x0a,  0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0x24,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x8d,  0x77,  0x7f,  0x38,  0xf1,  0xc6,  0x00,  0xb0,  0x37,  0xde,  0x5d,  0x95,  0x71,  0x7d,  0xdc,  0x33, 
 0x5c,  0x07,  0xcc,  0x00,  0xea,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0xda,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x44,  0x22,  0x9b,  0x79, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09, 
 0x0b,  0x26,  0xc2,  0x95,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x09,  0xc0,  0x07,  0xb5,  0xb3,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x32,  0x7f,  0x0d,  0xda,  0x10,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x26,  0x9c,  0x09,  0x75, 
 0x10,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06, 
 0xf8,  0xa8,  0x63,  0x8b,  0x10,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0x28,  0xc7,  0x92,  0x9c,  0x10,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x4e,  0x22,  0x62,  0xbc,  0x10,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0xdd,  0x4c,  0x41,  0xdd, 
 0x1e,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x00,  0xf1, 
 0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9,  0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05,  0x23,  0x2a,  0x21, 
 0x37,  0x08,  0xf1,  0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9,  0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05, 
 0x23,  0x00,  0x00,  0x00,  0x48,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x38,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81, 
 0x15,  0xe3,  0xd7,  0x10,  0x44,  0xd1,  0xa2,  0x03,  0x96,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x1f,  0xc8,  0xc0,  0x53, 
 0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3,  0xd7,  0x10,  0x44,  0x00, 
 0x47,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x37,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x00,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68,  0x1a, 
 0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x7a,  0xe0,  0xb4,  0x74,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x14,  0x4c,  0xaa,  0x23,  0xf1,  0x24,  0x7a,  0x23,  0x10, 
 0x66,  0x66,  0x68,  0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x00,  0x00,  0x43,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x8e,  0x72,  0x17,  0x22,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x4e, 
 0xec,  0xfb,  0x50,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x3a, 
 0x74,  0xf1,  0x5f,  0x00,  0xc2,  0x04,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0xf2,  0x3c,  0x48,  0xb3, 
 0x7e,  0x75,  0xe8,  0x3c,  0xb8,  0x59,  0x3e,  0x2a,  0x71,  0xf2,  0x36,  0x00,  0x90,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x2f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00, 
 0x75,  0x6e,  0x69,  0x74,  0x72,  0x65,  0x65,  0x5f,  0x69,  0x6e,  0x74,  0x65,  0x72,  0x66,  0x61,  0x63, 
 0x65,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x51, 
 0x74,  0x4e,  0x6f,  0x64,  0x65,  0x5f,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38, 
 0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x73,  0x65,  0x71,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x15,  0x42,  0xf6,  0x24,  0xf8,  0xf6,  0x15,  0x15,  0x1e,  0xde,  0xbe,  0x27,  0x61, 
 0xee,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x00,  0x00,  0x00, 
 0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00, 
 0x4f,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1d,  0x00,  0x00,  0x00,  0x73,  0x74,  0x64,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73, 
 0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x53,  0x74,  0x72,  0x69,  0x6e,  0x67,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x05,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61, 
 0x00,  0x00,  0x00,  0xf2,  0x15,  0x42,  0xf6,  0x24,  0xf8,  0xf6,  0x15,  0x15,  0x1e,  0xde,  0xbe,  0x27, 
 0x61,  0xee,  0x00,  0x00,  0xbb,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73, 
 0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4e,  0x6f, 
 0x64,  0x65,  0x5f,  0x00,  0x8b,  0x01,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x0b,  0x00,  0x00,  0x00, 
 0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x6e,  0x61,  0x6d,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09, 
 0x11,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f, 
 0x6e,  0x5f,  0x78,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x11,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65, 
 0x5f,  0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x5f,  0x79,  0x5f,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09, 
 0x11,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f, 
 0x6e,  0x5f,  0x7a,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x0a,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65, 
 0x5f,  0x79,  0x61,  0x77,  0x5f,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x10,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65, 
 0x5f,  0x61,  0x74,  0x74,  0x72,  0x69,  0x62,  0x75,  0x74,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1d,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06, 
 0x0b,  0x00,  0x00,  0x00,  0x75,  0x6e,  0x64,  0x65,  0x66,  0x69,  0x6e,  0x65,  0x64,  0x5f,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x06,  0x0e,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x73,  0x74,  0x61, 
 0x74,  0x65,  0x5f,  0x32,  0x5f,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x06,  0x0e,  0x00,  0x00,  0x00,  0x6e,  0x6f,  0x64,  0x65, 
 0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x33,  0x5f,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2,  0x01,  0x00,  0x00,  0xf2,  0x90,  0xfa,  0x7b,  0x63, 
 0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50,  0x10,  0x5f,  0x2a,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x6e,  0x6f,  0x64,  0x65,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x6c,  0x69,  0x73,  0x74,  0x5f, 
 0x00,  0x00,  0x00,  0xf2,  0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50,  0x10, 
 0x5f,  0x2a,  0x00,  0x00,  0x8c,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x31,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x29,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73, 
 0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x46,  0x6c, 
 0x6f,  0x61,  0x74,  0x33,  0x32,  0x4d,  0x75,  0x6c,  0x74,  0x69,  0x41,  0x72,  0x72,  0x61,  0x79,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a,  0xaa,  0xe1, 
 0x3e,  0xde,  0x13,  0x4a,  0x21,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6c,  0x61,  0x79,  0x6f, 
 0x75,  0x74,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x09,  0x06,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61, 
 0x5f,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a,  0xaa,  0xe1,  0x3e,  0xde, 
 0x13,  0x4a,  0x21,  0x00,  0x8b,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x30,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x28,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73, 
 0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4d,  0x75, 
 0x6c,  0x74,  0x69,  0x41,  0x72,  0x72,  0x61,  0x79,  0x4c,  0x61,  0x79,  0x6f,  0x75,  0x74,  0x5f,  0x00, 
 0x4f,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf2,  0x01,  0x00,  0x00,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba, 
 0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x64,  0x69,  0x6d,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x0d,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x5f,  0x6f,  0x66,  0x66,  0x73,  0x65,  0x74,  0x5f, 
 0x00,  0x00,  0x00,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e, 
 0x80,  0x0e,  0x00,  0x00,  0x92,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x33,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x2b,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73, 
 0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4d,  0x75, 
 0x6c,  0x74,  0x69,  0x41,  0x72,  0x72,  0x61,  0x79,  0x44,  0x69,  0x6d,  0x65,  0x6e,  0x73,  0x69,  0x6f, 
 0x6e,  0x5f,  0x00,  0x00,  0x52,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6c,  0x61,  0x62,  0x65, 
 0x6c,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x06,  0x00,  0x00,  0x00,  0x73,  0x69,  0x7a,  0x65,  0x5f,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x73,  0x74,  0x72,  0x69,  0x64,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x00,  0xb8,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0xf2,  0x3c,  0x48,  0xb3,  0x7e,  0x75,  0xe8,  0x3c,  0xb8,  0x59,  0x3e,  0x2a, 
 0x71,  0xf2,  0x36,  0xf1,  0xbc,  0xdd,  0x9d,  0x18,  0x21,  0x46,  0x23,  0x49,  0x6f,  0x23,  0x75,  0x9d, 
 0xab,  0x8f,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c, 
 0xc2,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a,  0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1, 
 0xf2,  0x15,  0x42,  0xf6,  0x24,  0xf8,  0xf6,  0x15,  0x15,  0x1e,  0xde,  0xbe,  0x27,  0x61,  0xee,  0xf1, 
 0xc6,  0x00,  0xb0,  0x37,  0xde,  0x5d,  0x95,  0x71,  0x7d,  0xdc,  0x33,  0x5c,  0x07,  0xcc,  0xf2,  0x90, 
 0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50,  0x10,  0x5f,  0x2a,  0xf1,  0xe8,  0x77, 
 0xf8,  0xfa,  0xae,  0xdc,  0xc9,  0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05,  0x23,  0xf2,  0xb9,  0x2e,  0x3b, 
 0x1f,  0xb0,  0x01,  0x0a,  0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a,  0x21,  0xf1,  0x1b,  0xf9,  0xae,  0x76, 
 0xc4,  0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3,  0xd7,  0x10,  0x44,  0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4, 
 0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66, 
 0x68,  0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::unitree_interfaces::msg::dds_::QtNode_>::type_info_blob() {
  static const uint8_t blob[] = {
 0x50,  0x01,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0xa0,  0x00,  0x00,  0x00,  0x9c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xbc,  0xdd,  0x9d,  0x18,  0x21,  0x46,  0x23,  0x49,  0x6f,  0x23,  0x75, 
 0x9d,  0xab,  0x8f,  0x00,  0x55,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x7c,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a,  0xb9,  0x26, 
 0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0x00,  0x28,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0xc6,  0x00,  0xb0,  0x37,  0xde,  0x5d,  0x95,  0x71,  0x7d,  0xdc,  0x33,  0x5c,  0x07,  0xcc,  0x00, 
 0xee,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xe8,  0x77,  0xf8,  0xfa,  0xae,  0xdc,  0xc9, 
 0x47,  0xe9,  0x3a,  0x65,  0x7f,  0x05,  0x23,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x1b,  0xf9,  0xae,  0x76,  0xc4,  0xb5,  0x1f,  0xa1,  0x81,  0x15,  0xe3,  0xd7,  0x10,  0x44,  0x00, 
 0x4b,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x24,  0x7a,  0x23,  0x10,  0x66,  0x66,  0x68, 
 0x1a,  0x8e,  0x0b,  0xfd,  0xdd,  0x15,  0x45,  0x00,  0x47,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0xa0,  0x00,  0x00,  0x00,  0x9c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x3c,  0x48,  0xb3, 
 0x7e,  0x75,  0xe8,  0x3c,  0xb8,  0x59,  0x3e,  0x2a,  0x71,  0xf2,  0x36,  0x00,  0x94,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x7c,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00, 
 0x53,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x15,  0x42,  0xf6,  0x24,  0xf8,  0xf6,  0x15, 
 0x15,  0x1e,  0xde,  0xbe,  0x27,  0x61,  0xee,  0x00,  0xbf,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x90,  0xfa,  0x7b,  0x63,  0xdd,  0xc6,  0x09,  0xd6,  0x91,  0xa8,  0x50,  0x10,  0x5f,  0x2a,  0x00, 
 0x90,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xb9,  0x2e,  0x3b,  0x1f,  0xb0,  0x01,  0x0a, 
 0xaa,  0xe1,  0x3e,  0xde,  0x13,  0x4a,  0x21,  0x00,  0x8f,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xc6,  0x70,  0x38,  0xfd,  0xa4,  0x0f,  0x25,  0xba,  0x21,  0xe8,  0x4b,  0x8e,  0x80,  0x0e,  0x00, 
 0x96,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_interfaces::msg::dds_::QtNode_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_interfaces::msg::dds_::QtNode_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_interfaces::msg::dds_::QtNode_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_interfaces::msg::dds_::QtNode_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_interfaces::msg::dds_::QtNode_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.node_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_interfaces::msg::dds_::QtNode_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::QtNode_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_interfaces::msg::dds_::QtNode_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.node_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_interfaces::msg::dds_::QtNode_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::QtNode_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_interfaces::msg::dds_::QtNode_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.node_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_interfaces::msg::dds_::QtNode_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::QtNode_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_interfaces::msg::dds_::QtNode_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.node_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_interfaces::msg::dds_::QtNode_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_interfaces::msg::dds_::QtNode_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_QTNODE__HPP
