/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: UnitreeCommond_.idl
  Source: UnitreeCommond_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_UNITREECOMMOND__HPP
#define DDSCXX_UNITREECOMMOND__HPP

#include "Int8_.hpp"

#include "String_.hpp"


namespace graph_msg
{
namespace msg
{
namespace dds_
{
class UnitreeCommond_
{
private:
 ::std_msgs::msg::dds_::String_ cmd__;
 ::std_msgs::msg::dds_::String_ seq__;
 ::std_msgs::msg::dds_::Int8_ faild_flag__;

public:
  UnitreeCommond_() = default;

  explicit UnitreeCommond_(
    const ::std_msgs::msg::dds_::String_& cmd_,
    const ::std_msgs::msg::dds_::String_& seq_,
    const ::std_msgs::msg::dds_::Int8_& faild_flag_) :
    cmd__(cmd_),
    seq__(seq_),
    faild_flag__(faild_flag_) { }

  const ::std_msgs::msg::dds_::String_& cmd_() const { return this->cmd__; }
  ::std_msgs::msg::dds_::String_& cmd_() { return this->cmd__; }
  void cmd_(const ::std_msgs::msg::dds_::String_& _val_) { this->cmd__ = _val_; }
  void cmd_(::std_msgs::msg::dds_::String_&& _val_) { this->cmd__ = _val_; }
  const ::std_msgs::msg::dds_::String_& seq_() const { return this->seq__; }
  ::std_msgs::msg::dds_::String_& seq_() { return this->seq__; }
  void seq_(const ::std_msgs::msg::dds_::String_& _val_) { this->seq__ = _val_; }
  void seq_(::std_msgs::msg::dds_::String_&& _val_) { this->seq__ = _val_; }
  const ::std_msgs::msg::dds_::Int8_& faild_flag_() const { return this->faild_flag__; }
  ::std_msgs::msg::dds_::Int8_& faild_flag_() { return this->faild_flag__; }
  void faild_flag_(const ::std_msgs::msg::dds_::Int8_& _val_) { this->faild_flag__ = _val_; }
  void faild_flag_(::std_msgs::msg::dds_::Int8_&& _val_) { this->faild_flag__ = _val_; }

  bool operator==(const UnitreeCommond_& _other) const
  {
    (void) _other;
    return cmd__ == _other.cmd__ &&
      seq__ == _other.seq__ &&
      faild_flag__ == _other.faild_flag__;
  }

  bool operator!=(const UnitreeCommond_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::graph_msg::msg::dds_::UnitreeCommond_>::getTypeName()
{
  return "graph_msg::msg::dds_::UnitreeCommond_";
}

template <> constexpr bool TopicTraits<::graph_msg::msg::dds_::UnitreeCommond_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::graph_msg::msg::dds_::UnitreeCommond_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::graph_msg::msg::dds_::UnitreeCommond_>::type_map_blob_sz() { return 766; }
template<> constexpr unsigned int TopicTraits<::graph_msg::msg::dds_::UnitreeCommond_>::type_info_blob_sz() { return 196; }
template<> inline const uint8_t * TopicTraits<::graph_msg::msg::dds_::UnitreeCommond_>::type_map_blob() {
  static const uint8_t blob[] = {
 0xf7,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf1,  0xae,  0x4e,  0x71,  0x7b,  0x68,  0x53,  0xd2, 
 0x91,  0x59,  0x28,  0xa7,  0x8c,  0xff,  0xe9,  0x00,  0x71,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x61,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a, 
 0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0x19,  0x7d,  0xac,  0x66,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a, 
 0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0xea,  0x52,  0x04,  0x93,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x04,  0x52,  0x07,  0xdd,  0x0f, 
 0x90,  0x80,  0xbb,  0x26,  0x2b,  0x95,  0xfe,  0x6d,  0x46,  0x52,  0x41,  0xf0,  0xe3,  0xf1,  0x59,  0x65, 
 0x6d,  0x08,  0x0a,  0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0x24,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x8d,  0x77,  0x7f,  0x38,  0xf1,  0x04,  0x52,  0x07,  0xdd,  0x0f,  0x90,  0x80,  0xbb,  0x26,  0x2b,  0x95, 
 0xfe,  0x6d,  0x46,  0x00,  0x23,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x1f,  0xc8,  0xc0,  0x53,  0x00,  0x9c,  0x01,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0xf2,  0xfe,  0xce,  0x73,  0xbe,  0xbc,  0x7f,  0x08,  0xbd,  0x3a,  0x65,  0x0a, 
 0x57,  0xd4,  0x1c,  0x00,  0xbe,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x2e,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x67,  0x72,  0x61,  0x70,  0x68,  0x5f,  0x6d,  0x73, 
 0x67,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x55,  0x6e, 
 0x69,  0x74,  0x72,  0x65,  0x65,  0x43,  0x6f,  0x6d,  0x6d,  0x6f,  0x6e,  0x64,  0x5f,  0x00,  0x00,  0x00, 
 0x82,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c, 
 0xc2,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x63,  0x6d,  0x64,  0x5f,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38, 
 0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x73,  0x65,  0x71,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0xae,  0x8e,  0x3e,  0xab,  0xc5,  0xd7,  0x1c,  0xdb,  0xcc,  0xd5,  0xfc,  0x4d,  0xe6, 
 0x71,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x66,  0x61,  0x69,  0x6c,  0x64,  0x5f,  0x66,  0x6c, 
 0x61,  0x67,  0x5f,  0x00,  0x00,  0x00,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad, 
 0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00,  0x00,  0x00,  0x4f,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x73,  0x74,  0x64,  0x5f, 
 0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a, 
 0x3a,  0x53,  0x74,  0x72,  0x69,  0x6e,  0x67,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0xf2,  0xae,  0x8e,  0x3e,  0xab, 
 0xc5,  0xd7,  0x1c,  0xdb,  0xcc,  0xd5,  0xfc,  0x4d,  0xe6,  0x71,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00, 
 0x73,  0x74,  0x64,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64, 
 0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x49,  0x6e,  0x74,  0x38,  0x5f,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x5f,  0x00,  0x00,  0x00,  0x5e,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0xf2,  0xfe,  0xce,  0x73,  0xbe,  0xbc,  0x7f,  0x08,  0xbd,  0x3a,  0x65,  0x0a, 
 0x57,  0xd4,  0x1c,  0xf1,  0xae,  0x4e,  0x71,  0x7b,  0x68,  0x53,  0xd2,  0x91,  0x59,  0x28,  0xa7,  0x8c, 
 0xff,  0xe9,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b,  0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c, 
 0xc2,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a,  0xb9,  0x26,  0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1, 
 0xf2,  0xae,  0x8e,  0x3e,  0xab,  0xc5,  0xd7,  0x1c,  0xdb,  0xcc,  0xd5,  0xfc,  0x4d,  0xe6,  0x71,  0xf1, 
 0x04,  0x52,  0x07,  0xdd,  0x0f,  0x90,  0x80,  0xbb,  0x26,  0x2b,  0x95,  0xfe,  0x6d,  0x46, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::graph_msg::msg::dds_::UnitreeCommond_>::type_info_blob() {
  static const uint8_t blob[] = {
 0xc0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xae,  0x4e,  0x71,  0x7b,  0x68,  0x53,  0xd2,  0x91,  0x59,  0x28,  0xa7, 
 0x8c,  0xff,  0xe9,  0x00,  0x75,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x59,  0x65,  0x6d,  0x08,  0x0a,  0xb9,  0x26, 
 0xa3,  0x33,  0xa6,  0x9d,  0x26,  0x9c,  0xb1,  0x00,  0x28,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x04,  0x52,  0x07,  0xdd,  0x0f,  0x90,  0x80,  0xbb,  0x26,  0x2b,  0x95,  0xfe,  0x6d,  0x46,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xfe,  0xce,  0x73,  0xbe,  0xbc,  0x7f,  0x08,  0xbd,  0x3a,  0x65,  0x0a, 
 0x57,  0xd4,  0x1c,  0x00,  0xc2,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xc3,  0xda,  0x80,  0xd6,  0x38,  0xe9,  0x1b, 
 0x9f,  0xad,  0x0a,  0x6b,  0x76,  0x5c,  0xc2,  0x00,  0x53,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xae,  0x8e,  0x3e,  0xab,  0xc5,  0xd7,  0x1c,  0xdb,  0xcc,  0xd5,  0xfc,  0x4d,  0xe6,  0x71,  0x00, 
 0x50,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::graph_msg::msg::dds_::UnitreeCommond_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::graph_msg::msg::dds_::UnitreeCommond_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::graph_msg::msg::dds_::UnitreeCommond_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::graph_msg::msg::dds_::UnitreeCommond_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::graph_msg::msg::dds_::UnitreeCommond_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.cmd_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.faild_flag_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::graph_msg::msg::dds_::UnitreeCommond_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::UnitreeCommond_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::graph_msg::msg::dds_::UnitreeCommond_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.cmd_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.faild_flag_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::graph_msg::msg::dds_::UnitreeCommond_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::UnitreeCommond_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::graph_msg::msg::dds_::UnitreeCommond_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.cmd_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.faild_flag_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::graph_msg::msg::dds_::UnitreeCommond_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::UnitreeCommond_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::graph_msg::msg::dds_::UnitreeCommond_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.cmd_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.seq_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.faild_flag_(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::graph_msg::msg::dds_::UnitreeCommond_& instance, bool as_key) {
  auto &props = get_type_props<::graph_msg::msg::dds_::UnitreeCommond_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_UNITREECOMMOND__HPP
